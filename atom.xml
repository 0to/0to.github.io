<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Just Do IT</title>
  <subtitle>Yesterday You Said Tomorrow</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://0to.github.io/"/>
  <updated>2018-01-02T07:14:21.188Z</updated>
  <id>https://0to.github.io/</id>
  
  <author>
    <name>Weilong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gitlab psql: undefined symbol: PQconnectdbParams</title>
    <link href="https://0to.github.io/posts/35560/"/>
    <id>https://0to.github.io/posts/35560/</id>
    <published>2018-01-02T06:48:04.000Z</published>
    <updated>2018-01-02T07:14:21.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司拆分子公司，需要把现有Gitlab也分离出来。</p>
<h4 id="搭建环境："><a href="#搭建环境：" class="headerlink" title="搭建环境："></a>搭建环境：</h4><ul>
<li>centos6.5</li>
<li>gitlab8.8.5</li>
</ul>
<h3 id="搭建方法："><a href="#搭建方法：" class="headerlink" title="搭建方法："></a>搭建方法：</h3><ul>
<li>Omnibus package installation</li>
</ul>
<h3 id="遇到问题："><a href="#遇到问题：" class="headerlink" title="遇到问题："></a>遇到问题：</h3><p>安装完成，执行 #gitlab-ctl reconfigure 报错如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[execute] /opt/gitlab/embedded/bin/psql: symbol lookup error: /opt/gitlab/embedded/bin/psql: undefined symbol: PQconnectdbParams</div><div class="line">[execute] /opt/gitlab/embedded/bin/psql: symbol lookup error: /opt/gitlab/embedded/bin/psql: undefined symbol: PQconnectdbParams</div><div class="line"></div><div class="line">================================================================================</div><div class="line">Error executing action `run` on resource &apos;execute[create gitlab database user]&apos;</div><div class="line">================================================================================</div><div class="line"></div><div class="line">Mixlib::ShellOut::ShellCommandFailed</div><div class="line">------------------------------------</div><div class="line">Expected process to exit with [0], but received &apos;127&apos;</div><div class="line">---- Begin output of /opt/gitlab/embedded/bin/psql --port 5432 -h /var/opt/gitlab/postgresql -d template1 -c &quot;CREATE USER gitlab&quot; ----</div><div class="line">STDOUT:</div><div class="line">STDERR: /opt/gitlab/embedded/bin/psql: symbol lookup error: /opt/gitlab/embedded/bin/psql: undefined symbol: PQconnectdbParams</div><div class="line">---- End output of /opt/gitlab/embedded/bin/psql --port 5432 -h /var/opt/gitlab/postgresql -d template1 -c &quot;CREATE USER gitlab&quot; ----</div><div class="line">Ran /opt/gitlab/embedded/bin/psql --port 5432 -h /var/opt/gitlab/postgresql -d template1 -c &quot;CREATE USER gitlab&quot; returned 127</div></pre></td></tr></table></figure></p>
<h3 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h3><p>因为我的centos服务器上面默认装了pgsql的8.4.18版本；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@gitlab0 ~]# rpm -qa|grep postgres</div><div class="line">postgresql-8.4.18-1.el6_4.x86_64</div><div class="line">postgresql-devel-8.4.18-1.el6_4.x86_64</div><div class="line">postgresql-libs-8.4.18-1.el6_4.x86_64</div></pre></td></tr></table></figure></p>
<p>使用/opt/gitlab/embedded/bin/psql的时候找不到对应的lib（/opt/gitlab/embedded/lib/postgresql）。</p>
<h3 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1:"></a>解决方法1:</h3><p>卸载postgresql-8.4.18,卸载gitlab,然后重新安装gitlab。</p>
<p>卸载gitlab方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo gitlab-ctl stop</div><div class="line">sudo gitlab-ctl uninstall</div><div class="line">sudo gitlab-ctl cleanse</div><div class="line">sudo rm -rf /opt/gitlab</div></pre></td></tr></table></figure></p>
<h3 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2:"></a>解决方法2:</h3><p>增加gitlab带的psql所需lib路径到$LD_LIBRARY_PATH<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># vi /etc/profile</div><div class="line"></div><div class="line">export LD_LIBRARY_PATH=/opt/gitlab/embedded/lib:/tmp/product.......</div><div class="line"></div><div class="line"># source /etc/profile</div><div class="line"></div><div class="line"># echo $LD_LIBRARY_PATH</div><div class="line"></div><div class="line">/opt/gitlab/embedded/lib:/tmp/product.......</div></pre></td></tr></table></figure></p>
<p>然后再执行#gitlab-ctl reconfigure，即可成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitlab Reconfigured!</div></pre></td></tr></table></figure></p>
<p>查看postgresql版本:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@gitlab0 ~]# /opt/gitlab/embedded/bin/psql --version</div><div class="line">psql (PostgreSQL) 9.2.16</div><div class="line">[root@gitlab0 ~]# psql --version</div><div class="line">psql (PostgreSQL) 8.4.18</div></pre></td></tr></table></figure></p>
<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="http://dreamlikes.cn/archives/78" target="_blank" rel="external">http://dreamlikes.cn/archives/78</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;公司拆分子公司，需要把现有Gitlab也分离出来。&lt;/p&gt;
&lt;h4 id=&quot;搭建环境：&quot;&gt;&lt;a href=&quot;#搭建环境：&quot; class=&quot;h
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Gitlab" scheme="https://0to.github.io/tags/Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>使用OpenGrok查询涉及关键字代码库</title>
    <link href="https://0to.github.io/posts/61445/"/>
    <id>https://0to.github.io/posts/61445/</id>
    <published>2017-11-27T08:08:37.000Z</published>
    <updated>2017-11-27T09:26:41.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><p>dev准备更新某个基础数据库表结构，为了评估影响范围和后续通知协作，需要找出使用此表的代码库。</p>
<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ol>
<li>查询数据库的连接IP，根据IP查询部署在上面的服务，根据服务找对应代码库。<ul>
<li>难点：<ul>
<li>并不是所有服务都会实时连接数据库，可能会漏掉；</li>
<li>服务器上面部署的服务太多，还需要再做过滤。</li>
</ul>
</li>
<li>综上，这个思路否定。</li>
</ul>
</li>
<li>直接通过关键字查询代码库源码来定位。<ul>
<li>难点：<ul>
<li>需要拥有大范围的代码库权限</li>
<li>多目录文件查询涉及关键字文件</li>
</ul>
</li>
<li>解决方案：<ul>
<li>作为公司SCM权限不是问题</li>
<li>使用OpenGrok来做关键字查询</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ul>
<li>OpenGrok：<a href="http://opengrok.github.io/OpenGrok/" target="_blank" rel="external">官方网站</a></li>
</ul>
<h2 id="实施步骤："><a href="#实施步骤：" class="headerlink" title="实施步骤："></a>实施步骤：</h2><ol>
<li><p>搭建OpenGrok：</p>
<ul>
<li>安装jdk-1.8</li>
<li>安装tomcat-8</li>
<li><p>安装Exuberant Ctags <a href="http://ctags.sourceforge.net/" target="_blank" rel="external">下载地址</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ tar zxvf ctags-5.8.tar.gz</div><div class="line">$ cd ctags-5.8/</div><div class="line">$ ./configure</div><div class="line">$ make</div><div class="line">$ make install</div></pre></td></tr></table></figure>
</li>
<li><p>安装opengrok <a href="https://github.com/OpenGrok/OpenGrok/releases" target="_blank" rel="external">下载地址</a>  | <a href="https://github.com/OpenGrok/OpenGrok/wiki/How-to-install-OpenGrok" target="_blank" rel="external">安装使用wiki</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tar zxvf opengrok-1.1-rc16.tar.gz</div><div class="line">$ cd opengrok-1.1-rc16/bin/</div><div class="line">$ OPENGROK_TOMCAT_BASE=/path/to/my/tomcat/install ./OpenGrok deploy</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>下载代码</p>
<ul>
<li><p>创建一个公共代码库存放目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /root/wwl/code/svn</div><div class="line">$ mkdir -p /root/wwl/code/git</div></pre></td></tr></table></figure>
</li>
<li><p>根据需要下载svn代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd /root/wwl/code/svn</div><div class="line">$ svn checkout svn_urls</div></pre></td></tr></table></figure>
</li>
<li><p>根据需要下载git代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd /root/wwl/code/git</div><div class="line">$ git clone git_urls</div></pre></td></tr></table></figure>
</li>
<li><p>PS:如果要想查询所有分支代码</p>
<ul>
<li>svn：直接checkout 包含branches目录url即可；</li>
<li>git：需要clone多次git_url到不同目录，然后cd到各自目录执行git checkout branch_name；</li>
<li>建议只下载master/trunk和最新dev分支即可。</li>
</ul>
</li>
</ul>
</li>
<li><p>加载OpenGrok索引</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ./OpenGrok index &lt;absolute_path_to_your_SRC_ROOT&gt;</div><div class="line">例如：</div><div class="line">    ./OpenGrok index /root/wwl/code</div></pre></td></tr></table></figure>
<p> PS：如果代码文件很多的话，加载索引会很久。晚上执行第二天来看结果吧。</p>
</li>
<li><p>关键字查询</p>
<ul>
<li><p>web端登陆:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;HOST&gt;:&lt;PORT&gt;/source</div></pre></td></tr></table></figure>
</li>
<li><p>执行查询:<br><img src="/posts/61445/OpenGrok.png" alt="logo"></p>
</li>
</ul>
</li>
</ol>
<h1 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h1><ol>
<li>OpenGrok还支持文件类型查询过滤等功能，各位可以自行尝试使用；</li>
<li>除了数据库表查询以外，常见的还有api调用查询；</li>
<li>这种方案是后置的，如果能在系统设计之初和迭代过程积极维护开发文档，形成系统整体调度架构图形的话，会另我们开发更加自信；</li>
<li>借此机会推动开发团队规范开发文档和产出系统调度架构图形。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景：&quot;&gt;&lt;a href=&quot;#背景：&quot; class=&quot;headerlink&quot; title=&quot;背景：&quot;&gt;&lt;/a&gt;背景：&lt;/h1&gt;&lt;p&gt;dev准备更新某个基础数据库表结构，为了评估影响范围和后续通知协作，需要找出使用此表的代码库。&lt;/p&gt;
&lt;h2 id=&quot;思路：&quot;&gt;&lt;
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="OpenGrok" scheme="https://0to.github.io/tags/OpenGrok/"/>
    
  </entry>
  
  <entry>
    <title>nexus2.x迁移repository到nexus3.x</title>
    <link href="https://0to.github.io/posts/7037/"/>
    <id>https://0to.github.io/posts/7037/</id>
    <published>2017-11-21T07:58:15.000Z</published>
    <updated>2017-11-21T11:35:36.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><p>公司之前使用nexus2.13.0版本的nexus，管理毕竟混乱。现搭建nexus3.6.0版本进行规范统一管理。</p>
<p>上篇记录nexus3搭建配置过程，本篇记录迁移nexus2.13.0版本库到nexus3.6.0版本过程。</p>
<h1 id="迁移思路方法："><a href="#迁移思路方法：" class="headerlink" title="迁移思路方法："></a>迁移思路方法：</h1><h3 id="迁移范围："><a href="#迁移范围：" class="headerlink" title="迁移范围："></a>迁移范围：</h3><table>
<thead>
<tr>
<th>仓库</th>
<th style="text-align:center">类型</th>
<th style="text-align:right">是否迁移</th>
</tr>
</thead>
<tbody>
<tr>
<td>proxy</td>
<td style="text-align:center">代理远端仓库</td>
<td style="text-align:right">已经在nexus3.6.0版本配置增加，不需要迁移</td>
</tr>
<tr>
<td>hosted-3rd</td>
<td style="text-align:center">本地内部仓库-第三方</td>
<td style="text-align:right">之前没有使用，不需要迁移</td>
</tr>
<tr>
<td>hosted-Snapshots</td>
<td style="text-align:center">本地内部仓库-快照版本</td>
<td style="text-align:right">之前使用比较混乱沟通确认舍弃，不需要迁移</td>
</tr>
<tr>
<td>hosted-Releases</td>
<td style="text-align:center">本地内部仓库-稳定版本</td>
<td style="text-align:right">需要迁移</td>
</tr>
</tbody>
</table>
<h3 id="迁移方法："><a href="#迁移方法：" class="headerlink" title="迁移方法："></a>迁移方法：</h3><p>如果原有hosted-Releases存放的jar包不多的话，可以考虑下载所有jar到本地，然后使用命令deploy到nexus3.6.0。</p>
<p>现状是原有库里面的jar包很多，groupId很多而且比较不规范（目录层级很复杂）。</p>
<h6 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h6><p>升级方法：<a href="https://help.sonatype.com/display/NXRM3/Upgrading" target="_blank" rel="external">官方文档</a></p>
<p>根据官方升级文档说明nexus2.14.1（或者之后版本）才能直升nexus3.x。因为原有nexus版本为2.13.0，所有需要先升级到2.14.x后，再迁移到nexus3.6.0版本。</p>
<p>升级路径为：<br>nexus2.x – nexus2.14.x – nexus3.x</p>
<h1 id="迁移步骤："><a href="#迁移步骤：" class="headerlink" title="迁移步骤："></a>迁移步骤：</h1><ol>
<li>搭建nexus2.14.5<ul>
<li><a href="https://www.sonatype.com/nexus-repository-oss" target="_blank" rel="external">官网下载</a> All platforms - Nexus Repository Manager OSS 2.x - bundle.zip</li>
<li>解压缩、安装运行</li>
<li>ps：windows遇到的坑,需要使用管理员权限进行cmd安装<br><img src="/posts/7037/win1.png" alt="logo"><br><img src="/posts/7037/win2.png" alt="logo"><br><img src="/posts/7037/win3.png" alt="logo"></li>
</ul>
</li>
<li>迁移原有nexus2.13.0仓库到nexus2.14.5<ul>
<li>仓库存放目录：sonatype-work\nexus\storage</li>
<li>拷贝原nexus2.13.0的sonatype-work\nexus\storage\releases目录下的依赖文件</li>
<li>覆盖nexus2.14.5的releases目录文件</li>
<li>重启nexus2.14.5并刷新索引<br><img src="/posts/7037/win4.png" alt="logo"><br><img src="/posts/7037/win5.png" alt="logo"><br><img src="/posts/7037/win6.png" alt="logo"></li>
</ul>
</li>
<li>迁移nexus2.14.5仓库到nexus3.6.0<ul>
<li>在nexus2.14.5上面配置Upgrade Agent<br><img src="/posts/7037/win7.png" alt="logo"><br><img src="/posts/7037/win8.png" alt="logo"></li>
<li>在nexus3.6.0上面执行Upgrade<br><img src="/posts/7037/win10.png" alt="logo"><br><img src="/posts/7037/win11.png" alt="logo"><br><img src="/posts/7037/win12.png" alt="logo"><br><img src="/posts/7037/win13.png" alt="logo"><br><img src="/posts/7037/win14.png" alt="logo"><br><img src="/posts/7037/win15.png" alt="logo"><br><img src="/posts/7037/win16.png" alt="logo"><br><img src="/posts/7037/win17.png" alt="logo"><br><img src="/posts/7037/win18.png" alt="logo"><br><img src="/posts/7037/win19.png" alt="logo"></li>
</ul>
</li>
</ol>
<h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>使用这种方法，原有的release仓库迁移成功。<br><img src="/posts/7037/win20.png" alt="logo"></p>
<h3 id="但是同时原有nexus的Privileges、Roles、Users也会过来，需要后续进行调整。"><a href="#但是同时原有nexus的Privileges、Roles、Users也会过来，需要后续进行调整。" class="headerlink" title="但是同时原有nexus的Privileges、Roles、Users也会过来，需要后续进行调整。"></a>但是同时原有nexus的Privileges、Roles、Users也会过来，需要后续进行调整。</h3><h2 id="当然此方法也可以用来全量升级nexus2-x到nexus3-x。"><a href="#当然此方法也可以用来全量升级nexus2-x到nexus3-x。" class="headerlink" title="当然此方法也可以用来全量升级nexus2.x到nexus3.x。"></a>当然此方法也可以用来全量升级nexus2.x到nexus3.x。</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景：&quot;&gt;&lt;a href=&quot;#背景：&quot; class=&quot;headerlink&quot; title=&quot;背景：&quot;&gt;&lt;/a&gt;背景：&lt;/h1&gt;&lt;p&gt;公司之前使用nexus2.13.0版本的nexus，管理毕竟混乱。现搭建nexus3.6.0版本进行规范统一管理。&lt;/p&gt;
&lt;p&gt;上
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="nexus" scheme="https://0to.github.io/tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>Nexus3搭建配置</title>
    <link href="https://0to.github.io/posts/28954/"/>
    <id>https://0to.github.io/posts/28954/</id>
    <published>2017-11-17T06:39:35.000Z</published>
    <updated>2017-11-17T11:15:56.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><ul>
<li>下载地址：<a href="https://www.sonatype.com/nexus-repository-oss" target="_blank" rel="external">官方网站</a></li>
<li>软硬件需求：<a href="https://help.sonatype.com/display/NXRM3/System+Requirements" target="_blank" rel="external">官方文档</a></li>
<li>安装方法：<a href="https://help.sonatype.com/display/NXRM3/Installation" target="_blank" rel="external">官方文档</a></li>
</ul>
<p>PS:</p>
<ul>
<li>nexus分为nexus-repository-oss(免费版)和nexus-repository-pro(商业版)</li>
<li>主要使用版本：2.x和3.x</li>
<li>版本区别：<a href="https://help.sonatype.com/display/NXRM3/Repository+Manager+Feature+Matrix#RepositoryManagerFeatureMatrix-OBR" target="_blank" rel="external">官方文档</a></li>
</ul>
<h1 id="JAVA项目依赖管理方法："><a href="#JAVA项目依赖管理方法：" class="headerlink" title="JAVA项目依赖管理方法："></a>JAVA项目依赖管理方法：</h1><ol>
<li>所有依赖jar包都上传提交到代码库里面：<ul>
<li>优点：直接获取代码库代码就可以进行编译打包，不需要依赖外部网络(独立个人小项目)</li>
<li>缺点：<ul>
<li>依赖包体积很大，导致代码获取推送太耗时和占用带宽；</li>
<li>基础框架依赖包每个代码库都要存放一份(空间浪费)；</li>
<li>当前依赖包版本不明确。</li>
</ul>
</li>
</ul>
</li>
<li>依赖包编译过程中下载，不上传到代码库：<ul>
<li>优点：<ul>
<li>代码库干净，体积小；</li>
<li>项目显性配置依赖包版本和引用阶段清晰明了。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h1 id="私服的优点："><a href="#私服的优点：" class="headerlink" title="私服的优点："></a>私服的优点：</h1><ol>
<li>统一服务器代理外部依赖（节省外网带宽）；</li>
<li>项目下载依赖通过内部网络的进行（更快）；</li>
<li>托管内部项目依赖（协作更方便）；</li>
<li>托管第三方依赖（例如：合作伙伴的依赖包）<br><img src="/posts/28954/nexus0.png" alt="logo"></li>
</ol>
<h1 id="搭建环境版本："><a href="#搭建环境版本：" class="headerlink" title="搭建环境版本："></a>搭建环境版本：</h1><ul>
<li>OS：        Windows Server 2012 R2</li>
<li>JDK：       1.8.0_71</li>
<li>nexus-repository-oss 3.6.0-02</li>
</ul>
<h1 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h1><ol>
<li>安装JDK</li>
<li>官网下载：nexus-3.6.0-02-win64.zip,解压缩</li>
<li><p>配置windows服务：<a href="https://help.sonatype.com/display/NXRM3/Run+as+a+Service" target="_blank" rel="external">官方文档</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$install-dir/bin/nexus.exe /install &lt;optional-service-name&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>启动服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nexus.exe /start &lt;optional-service-name&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>网页端登陆配置Nexus</p>
<ul>
<li><a href="http://$ip:8081" target="_blank" rel="external">http://$ip:8081</a></li>
<li>用户名/密码：admin/admin123</li>
</ul>
</li>
</ol>
<h1 id="后台配置："><a href="#后台配置：" class="headerlink" title="后台配置："></a>后台配置：</h1><ol>
<li><p>data目录修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$install-dir/bin/nexus.vmoptions</div><div class="line"></div><div class="line">-Dkaraf.data=../sonatype-work/nexus3</div><div class="line">-Djava.io.tmpdir=../sonatype-work/nexus3/tmp</div><div class="line">-XX:LogFile=../sonatype-work/nexus3/log/jvm.log</div></pre></td></tr></table></figure>
</li>
<li><p>服务端口号修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$data-dir/etc/nexus.properties</div><div class="line"></div><div class="line"># Jetty section</div><div class="line">application-port=8081</div></pre></td></tr></table></figure>
</li>
<li><p>jvm性能调优：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$install-dir/bin/nexus.vmoptions</div><div class="line"></div><div class="line">-Xms4G</div><div class="line">-Xmx4G</div><div class="line">-XX:MaxDirectMemorySize=4014M</div></pre></td></tr></table></figure>
</li>
</ol>
<p>以上修改都需要重启服务生效。</p>
<h1 id="前台配置："><a href="#前台配置：" class="headerlink" title="前台配置："></a>前台配置：</h1><p>使用管理员admin账号登陆</p>
<h2 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h2><p><img src="/posts/28954/nexus_email.jpg" alt="logo"></p>
<h2 id="配置LDAP"><a href="#配置LDAP" class="headerlink" title="配置LDAP"></a>配置LDAP</h2><p><img src="/posts/28954/nexus_ldap1.png" alt="logo"><br><img src="/posts/28954/nexus_ldap2.png" alt="logo"><br><img src="/posts/28954/nexus_ldap3.png" alt="logo"></p>
<h2 id="配置权限"><a href="#配置权限" class="headerlink" title="配置权限"></a>配置权限</h2><p><img src="/posts/28954/nexus_role1.png" alt="logo"><br><img src="/posts/28954/nexus_role2.png" alt="logo"><br><img src="/posts/28954/nexus_role3.png" alt="logo"></p>
<h2 id="配置repositories"><a href="#配置repositories" class="headerlink" title="配置repositories"></a>配置repositories</h2><p>repositories分为三个种类：</p>
<ol>
<li>proxy    代理远端仓库</li>
<li>hosted   本地内部仓库</li>
<li>group    组合仓库<br><img src="/posts/28954/nexus_res.png" alt="logo"></li>
</ol>
<h1 id="Maven依赖私服配置"><a href="#Maven依赖私服配置" class="headerlink" title="Maven依赖私服配置"></a>Maven依赖私服配置</h1><p>修改~/.m2/settings.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;settings&gt;</div><div class="line">  &lt;servers&gt;</div><div class="line">    &lt;server&gt;</div><div class="line">      &lt;id&gt;nexus&lt;/id&gt;</div><div class="line">      &lt;username&gt;用户名&lt;/username&gt;</div><div class="line">      &lt;password&gt;密码&lt;/password&gt;</div><div class="line">    &lt;/server&gt;</div><div class="line">  &lt;/servers&gt;</div><div class="line">  &lt;mirrors&gt;</div><div class="line">    &lt;mirror&gt;</div><div class="line">    &lt;!--This sends everything else to /public --&gt;</div><div class="line">    &lt;id&gt;nexus&lt;/id&gt;</div><div class="line">    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</div><div class="line">    &lt;url&gt;http://$ip:8081/repository/maven-public/&lt;/url&gt;</div><div class="line">    &lt;/mirror&gt;</div><div class="line">  &lt;/mirrors&gt;</div><div class="line">  &lt;profiles&gt;</div><div class="line">    &lt;profile&gt;</div><div class="line">    &lt;id&gt;nexus&lt;/id&gt;</div><div class="line">    &lt;!--Enable snapshots for the built in central repo to direct --&gt;</div><div class="line">    &lt;!--all requests to nexus via the mirror --&gt;</div><div class="line">    &lt;repositories&gt;</div><div class="line">        &lt;repository&gt;</div><div class="line">        &lt;id&gt;central&lt;/id&gt;</div><div class="line">        &lt;url&gt;http://central&lt;/url&gt;</div><div class="line">        &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</div><div class="line">        &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;</div><div class="line">        &lt;/repository&gt;</div><div class="line">    &lt;/repositories&gt;</div><div class="line">    &lt;pluginRepositories&gt;</div><div class="line">        &lt;pluginRepository&gt;</div><div class="line">        &lt;id&gt;central&lt;/id&gt;</div><div class="line">        &lt;url&gt;http://central&lt;/url&gt;</div><div class="line">        &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</div><div class="line">        &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;</div><div class="line">        &lt;/pluginRepository&gt;</div><div class="line">    &lt;/pluginRepositories&gt;</div><div class="line">    &lt;/profile&gt;</div><div class="line">  &lt;/profiles&gt;</div><div class="line">  &lt;activeProfiles&gt;</div><div class="line">    &lt;!--make the profile active all the time --&gt;</div><div class="line">    &lt;activeProfile&gt;nexus&lt;/activeProfile&gt;</div><div class="line">  &lt;/activeProfiles&gt;</div><div class="line">&lt;/settings&gt;</div></pre></td></tr></table></figure></p>
<h1 id="内部项目上传jar包："><a href="#内部项目上传jar包：" class="headerlink" title="内部项目上传jar包："></a>内部项目上传jar包：</h1><p>修改项目pom.xml文件增加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;distributionManagement&gt;</div><div class="line">    &lt;repository&gt;</div><div class="line">      &lt;id&gt;nexus&lt;/id&gt;</div><div class="line">      &lt;name&gt;Releases&lt;/name&gt;</div><div class="line">      &lt;url&gt;http://$ip:8081/repository/maven-releases&lt;/url&gt;</div><div class="line">    &lt;/repository&gt;</div><div class="line">    &lt;snapshotRepository&gt;</div><div class="line">      &lt;id&gt;nexus&lt;/id&gt;</div><div class="line">      &lt;name&gt;Snapshot&lt;/name&gt;</div><div class="line">      &lt;url&gt;http://$ip:8081/repository/maven-snapshots&lt;/url&gt;</div><div class="line">    &lt;/snapshotRepository&gt;</div><div class="line">&lt;/distributionManagement&gt;</div></pre></td></tr></table></figure></p>
<p>然后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean deploy</div></pre></td></tr></table></figure></p>
<h1 id="上传第三方jar包："><a href="#上传第三方jar包：" class="headerlink" title="上传第三方jar包："></a>上传第三方jar包：</h1><p>nexus3不能使用web端来上传第三方jar包，只能使用命令行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn deploy:deploy-file -DgroupId=$groupId -DartifactId=$artifactId -Dversion=$version -Dpackaging=jar -Dfile=$path/XX.jar -Durl=http://$ip:8081/repository/$hosted_3rd/ -DrepositoryId=nexus</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;参考链接：&quot;&gt;&lt;a href=&quot;#参考链接：&quot; class=&quot;headerlink&quot; title=&quot;参考链接：&quot;&gt;&lt;/a&gt;参考链接：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;下载地址：&lt;a href=&quot;https://www.sonatype.com/nexus-reposit
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="nexus" scheme="https://0to.github.io/tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>持续代码质量平台Sonar-5审计</title>
    <link href="https://0to.github.io/posts/54025/"/>
    <id>https://0to.github.io/posts/54025/</id>
    <published>2017-08-02T03:22:16.000Z</published>
    <updated>2017-08-02T06:54:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><pre><code>Dev已经习惯使用Sonarqube进行静态代码扫描，现准备进行阶段审计看下使用效果怎么样。
</code></pre><hr>
<p>PS：</p>
<ol>
<li>Sonarqube根据Key来唯一标示项目。</li>
<li>Resolution 里面的False Positive（误报）和 Won’t fix（暂不处理）会自动继承：<ul>
<li>如果一个问题本次标记为False Positive 或者 Won’t fix</li>
<li>以后此项目进行分析时此问题自动标记。</li>
<li>其他项目(Key不同)还是会报此问题。<br><img src="/posts/54025/resolutions.png" alt="logo"><br><img src="/posts/54025/resolution2.png" alt="logo"></li>
</ul>
</li>
</ol>
<hr>
<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>Dev正常进行开发过程的静态代码扫描，SCM对项目主干（master）代码进行轮询静态代码扫描。</p>
<ol>
<li>主干代码静态代码扫描时Project Key增加统一标志来区分Dev开发过程扫描：<ul>
<li>例如：修改maven pom文件 artifactId增加 master/admin/scm 后缀</li>
</ul>
</li>
<li>更新Dev开发过程项目标记规则到主干。</li>
</ol>
<hr>
<h2 id="同步不同项目标记规则："><a href="#同步不同项目标记规则：" class="headerlink" title="同步不同项目标记规则："></a>同步不同项目标记规则：</h2><ol>
<li>安装Issue resolver插件：<ul>
<li>Export and import resolved issues (false-positive and won’t fix) from SonarQube projects.</li>
</ul>
</li>
<li>更新dev项目标记规则到主干项目：<ul>
<li>web端操作方法：<br><img src="/posts/54025/biaoji1.png" alt="logo"><br><img src="/posts/54025/biaoji2.png" alt="logo"></li>
</ul>
<hr>
<ul>
<li>Api调用方法：<ul>
<li>查看：<a href="http://ip:9000/web_api/api/issueresolver" target="_blank" rel="external">http://ip:9000/web_api/api/issueresolver</a><br><img src="/posts/54025/api.png" alt="logo"></li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景：&quot;&gt;&lt;a href=&quot;#背景：&quot; class=&quot;headerlink&quot; title=&quot;背景：&quot;&gt;&lt;/a&gt;背景：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Dev已经习惯使用Sonarqube进行静态代码扫描，现准备进行阶段审计看下使用效果怎么样。
&lt;/code&gt;&lt;/pr
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Sonar" scheme="https://0to.github.io/tags/Sonar/"/>
    
  </entry>
  
  <entry>
    <title>持续代码质量平台Sonar-4Android</title>
    <link href="https://0to.github.io/posts/7875/"/>
    <id>https://0to.github.io/posts/7875/</id>
    <published>2017-07-18T10:51:03.000Z</published>
    <updated>2017-07-18T11:57:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><ul>
<li>Analyzing with SonarQube Scanner for Gradle：<a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Gradle" target="_blank" rel="external">官方文档</a></li>
<li>Gradle sonarqube插件：<a href="https://plugins.gradle.org/plugin/org.sonarqube" target="_blank" rel="external">官方文档</a></li>
<li>Sonarqube Android Lint plugin：<a href="https://github.com/ofields/sonar-android" target="_blank" rel="external">Github</a></li>
</ul>
<h1 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h1><ul>
<li>Gradle:       2.10</li>
<li>Sonarqube:    6.3.1</li>
</ul>
<h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">公司使用java语言开发Android项目，使用Gradle作为构建工具。</div><div class="line">默认的Sonarway java规则也可以进行静态代码扫描。</div><div class="line">希望增加业界常用的Android lint规则进行扫描，本文记录配置使用方法。</div></pre></td></tr></table></figure>
<hr>
<h3 id="Sonarqube-安装-Android-lint插件"><a href="#Sonarqube-安装-Android-lint插件" class="headerlink" title="Sonarqube 安装 Android lint插件"></a>Sonarqube 安装 Android lint插件</h3><p><img src="/posts/7875/Android_lint.png" alt="logo"><br>点击Quality Profiles查看Android Lint规则<br><img src="/posts/7875/lint.png" alt="logo"></p>
<hr>
<h3 id="Sonarqube-配置Android项目扫描规则"><a href="#Sonarqube-配置Android项目扫描规则" class="headerlink" title="Sonarqube 配置Android项目扫描规则"></a>Sonarqube 配置Android项目扫描规则</h3><p>我们配置一个新的Quality Profiles／java用于Android项目扫描。</p>
<p>新规则 包含Java Sonar way的Bugs、Vulnerabilities 和 Android Lint的Code Smells<br><img src="/posts/7875/Android.png" alt="logo"><br><img src="/posts/7875/new.png" alt="logo"><br><img src="/posts/7875/change.png" alt="logo"><br><img src="/posts/7875/next1.png" alt="logo"><br><img src="/posts/7875/next2.png" alt="logo"><br><img src="/posts/7875/code_smell.png" alt="logo"><br><img src="/posts/7875/done.png" alt="logo"></p>
<hr>
<h3 id="本地配置使用"><a href="#本地配置使用" class="headerlink" title="本地配置使用"></a>本地配置使用</h3><ul>
<li>配置系统gradle.properties增加下面内容 （～/.gradle/gradle.properties）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">systemProp.sonar.host.url=http://ip:9000</div><div class="line">#----- Security (when &apos;sonar.forceAuthentication&apos; is set to &apos;true&apos;)</div><div class="line">systemProp.sonar.login=个人token</div></pre></td></tr></table></figure>
<ul>
<li>修改项目build.gradle 相应位置增加下面配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">apply plugin: &quot;org.sonarqube&quot;</div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        maven&#123;url &quot;https://plugins.gradle.org/m2/&quot;&#125;</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">sonarqube &#123;</div><div class="line">    androidVariant &apos;fullDebug&apos;</div><div class="line">	properties &#123;</div><div class="line">        property &quot;sonar.projectName&quot;, &quot;项目名称&quot;</div><div class="line">        property &quot;sonar.projectKey&quot;, &quot;项目Key&quot;</div><div class="line">        property &quot;sonar.projectDescription&quot;, &quot;项目描述&quot;</div><div class="line">        property &quot;sonar.projectVersion&quot;, &quot;项目版本&quot;</div><div class="line">        property &quot;sonar.profile&quot;, &quot;Android(上面新建的profile名称)&quot;</div><div class="line">        property &quot;sonar.android.lint.report&quot;, &quot;./build/outputs/lint-results-debug.xml&quot;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>执行gradle lintDebug    生成lint-results-debug.xml</p>
</li>
<li><p>执行gradle Sonarqube    构建、分析、上传</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;参考链接：&quot;&gt;&lt;a href=&quot;#参考链接：&quot; class=&quot;headerlink&quot; title=&quot;参考链接：&quot;&gt;&lt;/a&gt;参考链接：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Analyzing with SonarQube Scanner for Gradle：&lt;a href=
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Sonar" scheme="https://0to.github.io/tags/Sonar/"/>
    
  </entry>
  
  <entry>
    <title>持续代码质量平台Sonar-3使用</title>
    <link href="https://0to.github.io/posts/19471/"/>
    <id>https://0to.github.io/posts/19471/</id>
    <published>2017-07-12T12:18:00.000Z</published>
    <updated>2017-07-18T11:05:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analyzing-Source-Code"><a href="#Analyzing-Source-Code" class="headerlink" title="Analyzing Source Code"></a>Analyzing Source Code</h2><p>参考链接：<a href="https://docs.sonarqube.org/display/SCAN/Analyzing+Source+Code" target="_blank" rel="external">官方文档</a></p>
<p>本文只涉及maven和sonar-scanner方式，其它请参考上面链接。</p>
<h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>适合Maven项目</p>
<ol>
<li>在sonarqube平台上面个人账户生成token。</li>
<li><p>在本机的mvn配置settings.xml 增加下面配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;profile&gt;</div><div class="line">    &lt;id&gt;sonar&lt;/id&gt;</div><div class="line">    &lt;activation&gt;</div><div class="line">        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</div><div class="line">    &lt;/activation&gt;</div><div class="line">    &lt;properties&gt;</div><div class="line">        &lt;sonar.host.url&gt;http://ip:9000&lt;/sonar.host.url&gt;</div><div class="line">        &lt;sonar.login&gt;第一步生成的token值&lt;/sonar.login&gt;</div><div class="line">    &lt;/properties&gt;</div><div class="line">&lt;/profile&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>代码库执行打包：mvn clean install</p>
</li>
<li>代码库进行分析并上传sonarqube平台：mvn sonar:sonar</li>
</ol>
<p>PS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">如果代码库pom文件配置如下</div><div class="line">    &lt;groupId&gt;ggg&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;aaa&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</div><div class="line">    &lt;name&gt;nnn&lt;/name&gt;</div><div class="line">那么分析上传到sonarqube平台：</div><div class="line">    对应的项目key为ggg:aaa</div><div class="line">    对应的项目名称为nnn</div><div class="line">    对应的版本为：1.0.0</div><div class="line">注意</div><div class="line">    不要找错项目了。</div><div class="line">    同一个key指向的项目永远显示的是最新的一次代码分析结果。</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Sonar-scanner"><a href="#Sonar-scanner" class="headerlink" title="Sonar-scanner"></a>Sonar-scanner</h3><p>适合所有项目</p>
<ol>
<li><p>下载Sonar-scanner，设置环境变量，配置<install_directory>/conf/sonar-scanner.properties</install_directory></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#Configure here general information about the environment, such as SonarQube DB details for example</div><div class="line">#No information about specific project should appear here</div><div class="line">#----- Default SonarQube server</div><div class="line">sonar.host.url=http://ip:9000</div><div class="line">#----- Default source code encoding</div><div class="line">sonar.sourceEncoding=UTF-8</div><div class="line">sonar.login=个人账户生成的token</div></pre></td></tr></table></figure>
</li>
<li><p>在项目根目录增加sonar-project.properties，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># must be unique in a given SonarQube instance</div><div class="line">sonar.projectKey=ggg:aaa            #对应的项目key为ggg:aaa</div><div class="line"># this is the name and version displayed in the SonarQube UI. Was mandatory prior to SonarQube 6.1.</div><div class="line">sonar.projectName=nnn               #对应的项目名称为nnn</div><div class="line">sonar.projectVersion=1.0.0          #对应的版本为：1.0.0</div><div class="line"># Path is relative to the sonar-project.properties file. Replace &quot;\&quot; by &quot;/&quot; on Windows.</div><div class="line"># This property is optional if sonar.modules is set.</div><div class="line">sonar.sources=.</div><div class="line">sonar.java.binaries=target/classes    #配置为项目具体的class目录，如果不配置的话只进行源代码分析</div><div class="line"># Encoding of the source code. Default is default system encoding</div><div class="line">#sonar.sourceEncoding=UTF-8</div></pre></td></tr></table></figure>
</li>
<li><p>执行扫描分析：<br> Build（可以不执行构建）<br> sonar-scanner</p>
</li>
</ol>
<hr>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>点击：<a href="http://ip:9000/web_api/" target="_blank" rel="external">http://ip:9000/web_api/</a> ，查看Sonarqube支持的web_api。</p>
<p>以Python2.7 为例简单介绍api使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#! /usr/bin/env python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import requests</div><div class="line"></div><div class="line">s = requests.session()</div><div class="line">user_info = &#123;&apos;login&apos;: &apos;username&apos;, &apos;password&apos;: &apos;pass&apos;&#125;</div><div class="line">api_url = &apos;http://ip:9000/api&apos;</div><div class="line"># 登录</div><div class="line">res_login = s.post(</div><div class="line">    &apos;%s/authentication/login&apos; % api_url, data=user_info)</div><div class="line"># 获取指定项目未解决Bugs详情</div><div class="line">res_bugs = s.get(</div><div class="line">    &apos;%s/issues/search&apos; % api_url, params=&#123;&apos;componentKeys&apos;: &apos;ggg:aaa&apos;, &apos;types&apos;: &apos;BUG&apos;, &apos;resolved&apos;: &apos;false&apos;, &apos;ps&apos;: 500&#125;)</div><div class="line"># 解析结果获取未解决bugs总数</div><div class="line">total_bugs = res_bugs.json()[u&apos;paging&apos;][u&apos;total&apos;]</div><div class="line"># 获取指定项目新增未解决Bugs详情</div><div class="line">res_new_bugs = s.get(</div><div class="line">    &apos;%s/issues/search&apos; % api_url, params=&#123;&apos;componentKeys&apos;: &apos;ggg:aaa&apos;, &apos;types&apos;: &apos;BUG&apos;, &apos;resolved&apos;: &apos;false&apos;, &apos;ps&apos;: 500, &apos;sinceLeakPeriod&apos;: &apos;true&apos;&#125;)</div><div class="line"># 解析结果获取新增bugs总数</div><div class="line">new_bugs = res_new_bugs.json()[u&apos;paging&apos;][u&apos;total&apos;]</div><div class="line"># 登出</div><div class="line">res_logout = s.post(</div><div class="line">    &apos;%s/authentication/logout&apos; % api_url)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Analyzing-Source-Code&quot;&gt;&lt;a href=&quot;#Analyzing-Source-Code&quot; class=&quot;headerlink&quot; title=&quot;Analyzing Source Code&quot;&gt;&lt;/a&gt;Analyzing Source Code&lt;/
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Sonar" scheme="https://0to.github.io/tags/Sonar/"/>
    
  </entry>
  
  <entry>
    <title>持续代码质量平台Sonar-2配置</title>
    <link href="https://0to.github.io/posts/32302/"/>
    <id>https://0to.github.io/posts/32302/</id>
    <published>2017-07-12T10:56:57.000Z</published>
    <updated>2017-07-12T12:54:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关联LDAP："><a href="#关联LDAP：" class="headerlink" title="关联LDAP："></a>关联LDAP：</h2><p>登录Sonarqube服务器，修改安装目录下的conf\sonar.properties文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># LDAP configuration</div><div class="line"># General Configuration</div><div class="line">sonar.security.realm=LDAP</div><div class="line">ldap.url=ldap://ip:389</div><div class="line">ldap.bindDn=cn=Manager,dc=xxx,dc=xxx,dc=xxx</div><div class="line">ldap.bindPassword=xxx</div><div class="line"></div><div class="line"># User Configuration</div><div class="line">ldap.user.baseDn=ou=People,dc=xxx,dc=xxx,dc=xxx</div><div class="line">ldap.user.request=(&amp;(objectClass=inetOrgPerson)(uid=&#123;0&#125;))</div><div class="line">ldap.user.realNameAttribute=cn</div><div class="line">ldap.user.emailAttribute=mail</div></pre></td></tr></table></figure></p>
<p>然后重启Sonarqube服务，即可使用LDAP账户进行登录。</p>
<hr>
<p>下面配置涉及下图：<br><img src="/posts/32302/sonaradmin.png" alt="logo"></p>
<h2 id="插件："><a href="#插件：" class="headerlink" title="插件："></a>插件：</h2><ul>
<li>参考链接：<a href="https://docs.sonarqube.org/display/PLUG/Plugin+Library" target="_blank" rel="external">官方文档</a></li>
<li>插件安装、更新有两种方法：<ol>
<li>手动下载后，上传到Sonarqube服务器安装目录下的\extensions\plugins，然后重启Sonarqube服务。</li>
<li>管理员账户登录Sonarqube，点击Administration - System - Update Center，进行安装or更新插件。（推荐！）</li>
</ol>
</li>
</ul>
<h2 id="配置邮件发送："><a href="#配置邮件发送：" class="headerlink" title="配置邮件发送："></a>配置邮件发送：</h2><ol>
<li>使用管理员账户登录Sonarqube,</li>
<li>点击：Administration - General Settings</li>
<li>找到Email配置区域，涉及以下几个SMTP配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 下面以QQ邮箱为例</div><div class="line">SMTP port               465</div><div class="line">SMTP host               smtp.exmail.qq.com</div><div class="line">From address            xxx@qq.com</div><div class="line">Email prefix            [SONARQUBE]</div><div class="line">Secure connection       ssl</div><div class="line">SMTP password           对应上面账户的密码</div><div class="line">SMTP username           xxx@qq.com</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h2 id="权限相关："><a href="#权限相关：" class="headerlink" title="权限相关："></a>权限相关：</h2><p>因为Sonarqube是为了发现代码问题，所以会在结果中展示源代码。为了代码安全，需要对权限进行配置。</p>
<h3 id="Force-user-authentication"><a href="#Force-user-authentication" class="headerlink" title="Force user authentication"></a>Force user authentication</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">使用管理员账户登录Sonarqube,点击Administration - General Settings - security</div><div class="line">    Force user authentication   ☑️              强制必须登录后才能使用</div><div class="line">    Default user group          sonar-users     默认新用户所在组</div></pre></td></tr></table></figure>
<h3 id="Users"><a href="#Users" class="headerlink" title="Users"></a>Users</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">使用管理员账户登录Sonarqube,点击Administration - Security - Users</div><div class="line">    此页面可以创建、修改、删除用户。</div><div class="line">    此页面还可以调整用户所在组信息。</div><div class="line">    如果是关联了LDAP，那么用户只有先使用LDAP账户登录后，才能在此查看到。</div></pre></td></tr></table></figure>
<h3 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">使用管理员账户登录Sonarqube,点击Administration - Security - Groups</div><div class="line">    此页面可以创建、删除组。</div><div class="line">    此页面还可以调整组用户。</div><div class="line">    默认存在下面2个组：</div><div class="line">        sonar-administrators</div><div class="line">        sonar-users</div></pre></td></tr></table></figure>
<h3 id="Global-Permissions"><a href="#Global-Permissions" class="headerlink" title="Global Permissions"></a>Global Permissions</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">使用管理员账户登录Sonarqube,点击Administration - Security - Global Permissions</div><div class="line">    此页面配置组用户的全局权限：</div><div class="line">        Administer System               系统管理员                           sonar-administrators</div><div class="line">        Administer Quality Profiles     可以配置Quality Profiles             sonar-administrators</div><div class="line">        Administer Quality Gates        可以配置Quality Gates                sonar-administrators</div><div class="line">        Execute Analysis                可以执行代码库分析                     sonar-users 或者 创建的组</div><div class="line">        Create Projects                 可以上传新代码库分析                   sonar-users 或者 创建的组</div></pre></td></tr></table></figure>
<h3 id="Permission-Templates"><a href="#Permission-Templates" class="headerlink" title="Permission Templates"></a>Permission Templates</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">使用管理员账户登录Sonarqube,点击Administration - Security - Permission Templates</div><div class="line">    此页面配置项目模版权限。</div><div class="line">    此页面还可以设置默认模版（新项目自动设置为默认模版权限）。</div><div class="line">        Browse                         查看项目状态</div><div class="line">        See Source Code                查看项目源代码</div><div class="line">        Administer Issues              对此项目的问题进行判断、评论、更改状态</div><div class="line">        Administer                     项目管理员</div><div class="line">        Execute Analysis               执行代码库分析</div></pre></td></tr></table></figure>
<h3 id="Project-PermissionsGrant"><a href="#Project-PermissionsGrant" class="headerlink" title="Project PermissionsGrant"></a>Project PermissionsGrant</h3><p>配置项目权限，有下面两种方法：</p>
<ol>
<li><p>只需要项目管理员权限即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">点击项目界面 - Administration - Permissions</div><div class="line">    可以增加、删除、更新组or个人对此项目权限</div><div class="line">    可以使用权限模版对此项目进行赋权</div></pre></td></tr></table></figure>
</li>
<li><p>需要系统管理员权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">使用管理员账户登录Sonarqube,点击Administration - Projects - Management</div><div class="line">    此界面展示所有项目，找到需要修改项目后。</div><div class="line">    点击最右边的Actions，进行权限修改or使用权限模版进行权限更新。</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h2 id="规则配置："><a href="#规则配置：" class="headerlink" title="规则配置："></a>规则配置：</h2><p>配置扫描使用的规则<br><img src="/posts/32302/sonarrules.png" alt="logo"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关联LDAP：&quot;&gt;&lt;a href=&quot;#关联LDAP：&quot; class=&quot;headerlink&quot; title=&quot;关联LDAP：&quot;&gt;&lt;/a&gt;关联LDAP：&lt;/h2&gt;&lt;p&gt;登录Sonarqube服务器，修改安装目录下的conf\sonar.properties文件。&lt;br
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Sonar" scheme="https://0to.github.io/tags/Sonar/"/>
    
  </entry>
  
  <entry>
    <title>持续代码质量平台Sonar-1搭建</title>
    <link href="https://0to.github.io/posts/60810/"/>
    <id>https://0to.github.io/posts/60810/</id>
    <published>2017-06-20T08:33:00.000Z</published>
    <updated>2017-07-12T08:26:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><ul>
<li>下载地址：<a href="https://www.sonarqube.org/downloads/" target="_blank" rel="external">官方网站</a></li>
<li>软硬件需求：<a href="https://docs.sonarqube.org/display/SONAR/Requirements#Requirements-Requirements-SupportedPlatforms" target="_blank" rel="external">官方文档</a></li>
<li>安装方法：<a href="https://docs.sonarqube.org/display/SONAR/Installing+the+Server" target="_blank" rel="external">官方文档</a></li>
</ul>
<p>PS：</p>
<ul>
<li>Sonarqube自带了轻量级的H2数据库，测试和跑少量项目是没有问题的。基于后期的性能、运维、扩展等考虑，我们选择使用Mysql数据库。</li>
<li>Sonarqube自带了web server，也可以使用Tomcat来进行加载。基于以往的使用经验默认的web server足够使用，我们选择默认。</li>
</ul>
<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><ul>
<li>OS：      Windows Server 2012 R2</li>
<li>JDK:      1.8.0_71</li>
<li>DB:       Mysql 5.6.26</li>
<li>Sonar:    6.3.1</li>
</ul>
<h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><ol>
<li><p>安装JDK</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">C:\Users\Administrator&gt;java -version</div><div class="line">java version &quot;1.8.0_71&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_71-b15)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.71-b15, mixed mode)</div></pre></td></tr></table></figure>
</li>
<li><p>安装Mysql</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">C:\Users\Administrator&gt;mysql -V</div><div class="line">mysql  Ver 14.14 Distrib 5.6.26, for Win64 (x86_64)</div></pre></td></tr></table></figure>
</li>
<li><p>创建数据库和用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 创建sonar数据库</div><div class="line">CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;</div><div class="line"># 创建sonar用户</div><div class="line">CREATE USER &apos;sonar&apos; IDENTIFIED BY &apos;passwd&apos;;</div><div class="line"># 赋予sonar用户对sonar数据库权限</div><div class="line">GRANT ALL ON sonar.* TO &apos;sonar&apos;@&apos;%&apos; IDENTIFIED BY &apos;passwd&apos;;</div><div class="line">GRANT ALL ON sonar.* TO &apos;sonar&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;passwd&apos;;</div><div class="line">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
</li>
<li><p>安装Sonarqube</p>
<ul>
<li>解压缩sonarqube-6.3.1.zip到D:\scm\sonarqube-6.3.1</li>
<li><p>修改配置D:\scm\sonarqube-6.3.1\conf\sonar.properties</p>
<ul>
<li>sonar.jdbc.username=sonar</li>
<li>sonar.jdbc.password=passwd</li>
<li>sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance</li>
<li>sonar.web.host=本机IP</li>
<li>sonar.web.context=</li>
<li>sonar.web.port=9000</li>
<li>sonar.web.http.maxThreads=500</li>
</ul>
</li>
<li><p>配置Sonarqube windows服务</p>
<ol>
<li>以管理员身份运行D:\scm\sonarqube-6.3.1\bin\windows-x86-64\InstallNTService.bat创建服务<br><img src="/posts/60810/Service.jpeg" alt="logo"></li>
<li>配置Administrator账户运行Sonarqube服务<br><img src="/posts/60810/AdminService.jpeg" alt="logo"></li>
<li>启动Sonarqube服务<ul>
<li>建议使用上面配置的windows service启动</li>
<li>也可以直接运行D:\scm\sonarqube-6.3.1\bin\windows-x86-64\StartSonar.bat</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>网页端登陆配置Sonarqube</p>
<ul>
<li><a href="http://搭建机器ip:9000" target="_blank" rel="external">http://搭建机器ip:9000</a></li>
<li>用户名/密码：admin</li>
</ul>
</li>
</ol>
<hr>
<h3 id="PS1："><a href="#PS1：" class="headerlink" title="PS1："></a>PS1：</h3><p>在安装的过程中遇到问题：</p>
<ul>
<li>运行InstallNTService.bat生成系统服务的时候没有使用管理员身份；</li>
<li><p>Sonarqube服务创建成功，但是启动的时候失败；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2017.06.20 14:34:50 ERROR web[][o.a.c.c.C.[.[.[/]] Exception sending context initialized event to listener instance of class org.sonar.server.platform.web.PlatformServletContextListener</div><div class="line">org.sonar.api.utils.MessageException: Current version is too old. Please upgrade to Long Term Support version firstly.</div><div class="line">2017.06.20 14:34:50 ERROR web[][o.a.c.c.StandardContext] One or more listeners failed to start. Full details will be found in the appropriate container log file</div><div class="line">2017.06.20 14:34:50 ERROR web[][o.a.c.c.StandardContext] Context [] startup failed due to previous errors</div></pre></td></tr></table></figure>
</li>
<li><p>查看发现mysql数据库sonar已经有了很多表；</p>
</li>
</ul>
<p>解决方法：</p>
<ol>
<li>删除sonar数据库里面的表，删除Sonarqube服务</li>
<li>安装上面过程：先以管理员身份运行InstallNTService.bat，然后配置Administrator账户运行Sonarqube服务</li>
<li>重新启动Sonarqube服务即可。</li>
</ol>
<hr>
<h3 id="PS2"><a href="#PS2" class="headerlink" title="PS2:"></a>PS2:</h3><p>如果Mysql数据库启用了binarylog的话，请设置为row格式。否则在启动Sonarqube的时候创建数据库表会报下面错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error updating database.  Cause: java.sql.SQLException: Cannot execute statement: impossible to write to binary log since BINLOG_FORMAT = STATEMENT and at least one table uses a storage engine limited to row-based logging. InnoDB is limited to row-logging when transaction isolation level is READ COMMITTED or READ UNCOMMITTED.</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;参考链接：&quot;&gt;&lt;a href=&quot;#参考链接：&quot; class=&quot;headerlink&quot; title=&quot;参考链接：&quot;&gt;&lt;/a&gt;参考链接：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;下载地址：&lt;a href=&quot;https://www.sonarqube.org/downloads/&quot; 
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Sonar" scheme="https://0to.github.io/tags/Sonar/"/>
    
  </entry>
  
  <entry>
    <title>Java static code analysis</title>
    <link href="https://0to.github.io/posts/33032/"/>
    <id>https://0to.github.io/posts/33032/</id>
    <published>2017-06-20T08:32:48.000Z</published>
    <updated>2017-07-12T08:23:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><ul>
<li>Wiki：<a href="https://en.wikipedia.org/wiki/Static_program_analysis" target="_blank" rel="external">Static_program_analysis</a></li>
<li>Wiki：<a href="https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis" target="_blank" rel="external">List_of_tools_for_static_code_analysis</a></li>
<li>工具对比：<a href="http://continuousdev.com/2015/08/checkstyle-vs-pmd-vs-findbugs" target="_blank" rel="external">checkstyle-vs-pmd-vs-findbugs</a></li>
<li>工具对比：<a href="https://zeroturnaround.com/rebellabs/developers-guide-static-code-analysis-findbugs-checkstyle-pmd-coverity-sonarqube" target="_blank" rel="external">findbugs-checkstyle-pmd-coverity-sonarqube</a></li>
</ul>
<hr>
<h1 id="静态代码分析："><a href="#静态代码分析：" class="headerlink" title="静态代码分析："></a>静态代码分析：</h1><ul>
<li>定义：不运行计算机程序的条件下，进行程序分析的方法。</li>
<li>目的：验证代码是否满足规范性、安全性、可靠性、可维护性等指标，发现代码缺陷并提高代码的质量。</li>
<li>范围：源代码（主要）、编译产生的字节码。</li>
<li>常用技术：<ul>
<li>词法分析：通过正则表达式匹配将源代码转换成标记序列。</li>
<li>语法分析：判断源程序结构上是否正确，通过使用上下文无关语法将相关符号整理为语法树。</li>
<li>语义分析：对结构上正确的源程序进行上下文有关性质的审查。</li>
<li>抽象语法树：将程序组织成树形结构，树中相关节点代表了程序中的相关代码。</li>
<li>控制流分析：生成有向控制流图，用节点表示基本代码块，节点间的有向边代表控制流路径，反向边表示可能存在的循环；还可生成函数调用关系图，表示函数间的嵌套关系。</li>
<li>无效代码分析：根据控制流图可分析孤立的节点部分为无效代码。<br>数据流分析：对控制流图进行遍历，记录变量的初始化点和引用点，保存切片相关数据信息。</li>
<li>污点分析：基于数据流图判断源代码中哪些变量可能受到攻击，是验证程序输入、识别代码表达缺陷的关键。</li>
<li>缺陷模式匹配：缺陷模式匹配事先从代码分析经验中收集足够多的共性缺陷模式，将待分析代码与已有的共性缺陷模式进行模式匹配，从而完成软件的安全分析。</li>
</ul>
</li>
</ul>
<hr>
<h1 id="Java开源静态代码分析工具对比："><a href="#Java开源静态代码分析工具对比：" class="headerlink" title="Java开源静态代码分析工具对比："></a>Java开源静态代码分析工具对比：</h1><table>
<thead>
<tr>
<th>工具</th>
<th style="text-align:center">源代码分析</th>
<th style="text-align:center">字节码分析</th>
<th style="text-align:center">定位</th>
<th style="text-align:center">官网地址</th>
<th style="text-align:center">版本</th>
<th style="text-align:center">其它语言支持</th>
</tr>
</thead>
<tbody>
<tr>
<td>Checkstyle</td>
<td style="text-align:center">Y</td>
<td style="text-align:center"></td>
<td style="text-align:center">验证符合编码规则</td>
<td style="text-align:center"><a href="http://checkstyle.sourceforge.net" target="_blank" rel="external">http://checkstyle.sourceforge.net</a></td>
<td style="text-align:center">7.8.2（2017.6.18）</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>FindBugs</td>
<td style="text-align:center"></td>
<td style="text-align:center">Y</td>
<td style="text-align:center">发现Bugs</td>
<td style="text-align:center"><a href="http://findbugs.sourceforge.net" target="_blank" rel="external">http://findbugs.sourceforge.net</a></td>
<td style="text-align:center">3.0.1（2015.3.6）</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>PMD</td>
<td style="text-align:center">Y</td>
<td style="text-align:center"></td>
<td style="text-align:center">发现缺陷</td>
<td style="text-align:center"><a href="https://pmd.github.io" target="_blank" rel="external">https://pmd.github.io</a></td>
<td style="text-align:center">5.8.0（2017.6.24）</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td>Sonarqube</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">持续质量平台</td>
<td style="text-align:center"><a href="https://www.sonarqube.org" target="_blank" rel="external">https://www.sonarqube.org</a></td>
<td style="text-align:center">6.3.1（2017.4.12）</td>
<td style="text-align:center">Y</td>
</tr>
</tbody>
</table>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS:"></a>PS:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">最初Sonarqube只是做静态代码分析结果聚类展示。</div><div class="line">后来随项目的发展，考虑到静态代码分析工具发展的不可控性（毕竟不属于自身项目），Sonarqube开始也涉及静态代码分析。</div><div class="line">在此过程中，Sonarqube借鉴了Checkstyle、FindBugs、PMD的规则方法。</div><div class="line">所以，本篇所指的Sonarqube既包含静态代码分析SonarJava（主要）又包含结果展示。</div><div class="line">以上参考下面链接：</div><div class="line">      https://groups.google.com/forum/#!topic/sonarqube/9M0iZ4OILVM</div><div class="line">      https://blog.sonarsource.com/sonarqube-java-analyzer-the-only-rule-engine-you-need/</div></pre></td></tr></table></figure>
<hr>
<h3 id="Checkstyle："><a href="#Checkstyle：" class="headerlink" title="Checkstyle："></a>Checkstyle：</h3><p>官网：<a href="http://checkstyle.sourceforge.net/checks.html" target="_blank" rel="external">检查规则</a></p>
<p>主要涉及以下几个方面：</p>
<ul>
<li>注解</li>
<li>javadoc注释</li>
<li>命名规范</li>
<li>文件头</li>
<li>导入包规范</li>
<li>尺寸设置</li>
<li>空格</li>
<li>正则表达式</li>
<li>修饰符</li>
<li>代码块</li>
<li>编码问题</li>
<li>类设计问题</li>
<li>重复、度量以及一些杂项</li>
</ul>
<hr>
<h3 id="FindBugs："><a href="#FindBugs：" class="headerlink" title="FindBugs："></a>FindBugs：</h3><p>官网：<a href="http://findbugs.sourceforge.net/bugDescriptions.html" target="_blank" rel="external">检查规则</a></p>
<p>主要涉及以下几个方面：</p>
<ul>
<li>Multithreaded correctness - 如多线程编程时常见的同步、线程调度问题。</li>
<li>Performance - 如由变量定义、方法调用导致的代码低效问题。</li>
<li>Internationalization - 如错误的字符串转换带来的国际化问题。</li>
<li>code vulnerabilities - 可能受到的恶意攻击，如访问权限修饰符的定义等。</li>
<li>possible bugs - 可能导致错误的代码，如空指针引用，常见代码错误，序列化错误。</li>
<li>Bad practice - 如命名不规范（类名应以大写字母开头），没有finally来关闭IO流，不检查方法返回值等。</li>
<li>Correctness - 正确性问题，如instanceof永远返回false。</li>
</ul>
<hr>
<h3 id="PMD："><a href="#PMD：" class="headerlink" title="PMD："></a>PMD：</h3><p>官网：<a href="https://pmd.github.io/pmd-5.8.0/pmd-java/rules/index.html" target="_blank" rel="external">Java检查规则</a></p>
<p>主要涉及以下几个方面：</p>
<ul>
<li>Possible bugs - empty try/catch/finally/switch statements</li>
<li>Dead code - unused local variables, parameters and private methods</li>
<li>Suboptimal code - wasteful String/StringBuffer usage</li>
<li>Overcomplicated expressions - unnecessary if statements, for loops that could be while loops</li>
<li>Duplicate code - copied/pasted code means copied/pasted bugs</li>
</ul>
<hr>
<h3 id="Sonarqube"><a href="#Sonarqube" class="headerlink" title="Sonarqube"></a>Sonarqube</h3><p>官网：<a href="https://www.sonarsource.com/products/codeanalyzers/sonarjava/rules.html" target="_blank" rel="external">Java检查规则</a></p>
<p>主要涉及以下几个方面：</p>
<ul>
<li>Bugs</li>
<li>Vulnerability</li>
<li>Code Smell</li>
</ul>
<hr>
<h2 id="VS："><a href="#VS：" class="headerlink" title="VS："></a>VS：</h2><h3 id="规则覆盖："><a href="#规则覆盖：" class="headerlink" title="规则覆盖："></a>规则覆盖：</h3><ul>
<li>目前Sonarqube自带的SonarJava插件检查规则几乎包含了Checkstyle、FindBugs、PMD的规则。</li>
<li>在具体的一些问题上面，几款工具各有千秋。</li>
<li>存在同一个问题几款工具分别对其进行不同标注情况。</li>
</ul>
<h3 id="结果输出展示："><a href="#结果输出展示：" class="headerlink" title="结果输出展示："></a>结果输出展示：</h3><ul>
<li>Checkstyle、FindBugs、PMD 运行结果输出支持Xml和Html格式。</li>
<li>Sonarqube 运行结果存入数据库，web端展示。支持和上次结果对比。可视化做的很赞！</li>
</ul>
<h3 id="工具更新："><a href="#工具更新：" class="headerlink" title="工具更新："></a>工具更新：</h3><ul>
<li>FindBugs已经很久不更新了。</li>
<li>Checkstyle、PMD、Sonarqube更新频率都挺高的。</li>
</ul>
<h3 id="检查范围："><a href="#检查范围：" class="headerlink" title="检查范围："></a>检查范围：</h3><ul>
<li>FindBugs 只对编译产生的class文件进行检查</li>
<li>Checkstyle、PMD 只对源代码进行插件</li>
<li>Sonarqube：<ul>
<li>对于所有支持的编程语言，SonarQube 都提供源了代码的静态分析功能；</li>
<li>对于某些特定的编程语言，SonarQube 提供了对编译后代码的静态分析功能，比如 java 中的 class file 和 jar 和 C# 中的 dll file 等；</li>
<li>对于某些特定的编程语言，SonarQube 还可以提供对于代码的动态分析功能，比如 java 和 C# 中的单元测试的执行等。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><ul>
<li>推荐使用Sonarqube来进行Java代码静态扫描。</li>
<li>自带的SonarJava插件规则已经够用，建议直接上手使用。</li>
<li>在使用过程中可以补充Checkstyle、FindBugs、PMD相应规则到Sonar检查。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;参考链接：&quot;&gt;&lt;a href=&quot;#参考链接：&quot; class=&quot;headerlink&quot; title=&quot;参考链接：&quot;&gt;&lt;/a&gt;参考链接：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Wiki：&lt;a href=&quot;https://en.wikipedia.org/wiki/Static_p
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Sonar" scheme="https://0to.github.io/tags/Sonar/"/>
    
  </entry>
  
  <entry>
    <title>分支策略</title>
    <link href="https://0to.github.io/posts/52695/"/>
    <id>https://0to.github.io/posts/52695/</id>
    <published>2017-04-25T11:37:40.000Z</published>
    <updated>2017-05-03T08:16:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><blockquote>
<p>为了更好的支持产品研发过程，我们需要设计符合公司研发的分支策略。<br>无论多复杂或者简单的策略都可以归类为以下两种：</p>
<blockquote>
<p>1.主干开发，分支发布<br>2.分支开发，主干发布</p>
</blockquote>
<p>PS：我们约定：</p>
<blockquote>
<p>主干（master/git  trunk/svn）<br>    分支（branch）<br>    标签（tag）<br>如果从版本控制工具实现上来看：<br>        svn： trunk、branch、tag 没有差别<br>        git： master、branch、轻量级tag 没有差别<br>        为了更好的区分和管理，人为的从逻辑上进行区分<br>        tag的作用：里程碑记录，方便回溯（发布回滚等）</p>
</blockquote>
</blockquote>
<h1 id="主干开发，分支发布："><a href="#主干开发，分支发布：" class="headerlink" title="主干开发，分支发布："></a>主干开发，分支发布：</h1><p><img src="/posts/52695/zhugan.png" alt="logo"></p>
<ul>
<li>优点：<ol>
<li>较少的分支存在，大家专注在主干开发</li>
</ol>
</li>
<li>适用于：<ol>
<li>敏捷开发模式，每个迭代都很快</li>
<li>维护型项目，较少需求变更，基本没有并行开发的需要</li>
<li>个人项目</li>
</ol>
</li>
<li>常用方式：<ol>
<li>所有dev在主干上面进行开发</li>
<li>需要发布的时候从指定版本拉出发布分支，进行测试<ul>
<li>如果成功：那么打出tag，进行发布</li>
<li>如果不成功：那么继续在发布分支上面进行修改，然后测试；<br>  测试成功后，打tag，合并发布分支修改到主干；</li>
</ul>
</li>
</ol>
</li>
</ul>
<h1 id="分支开发，主干发布："><a href="#分支开发，主干发布：" class="headerlink" title="分支开发，主干发布："></a>分支开发，主干发布：</h1><p><img src="/posts/52695/fenzhi.png" alt="logo"></p>
<ul>
<li>优点：<ol>
<li>对并行开发支持很好</li>
</ol>
</li>
<li>适用于：<ol>
<li>并行开发很频繁的项目</li>
</ol>
</li>
<li>常用方式：<ol>
<li>根据项目发布排期拉出并行开发分支</li>
<li>不同or相同的dev分别在分支上面进行开发</li>
<li>测试通过后，打tag进行发布，合并分支修改到主干</li>
<li>后发布的分支需要合并最新的主干代码</li>
</ol>
</li>
<li>注意点：<ol>
<li>所有分支都从主干拉出；</li>
<li>发布时候要检查 tag是否包含最新的主干代码；</li>
<li>后发布的分支在合并最新主干代码后，注意测试范围扩大（除了测试本分支功能外，合并过来的功能也需要覆盖到！！！）</li>
</ol>
</li>
</ul>
<h1 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h1><p>本文只是简单介绍下基础的分支策略，各位需根据自身团队、业务来综合定制适合的分支策略。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景：&quot;&gt;&lt;a href=&quot;#背景：&quot; class=&quot;headerlink&quot; title=&quot;背景：&quot;&gt;&lt;/a&gt;背景：&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;为了更好的支持产品研发过程，我们需要设计符合公司研发的分支策略。&lt;br&gt;无论多复杂或者简单的策略都可以归类
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Git" scheme="https://0to.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Gerrit code review</title>
    <link href="https://0to.github.io/posts/2248/"/>
    <id>https://0to.github.io/posts/2248/</id>
    <published>2017-04-06T07:07:45.000Z</published>
    <updated>2017-05-03T08:32:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote>
<p>公司使用Gerrit作为代码托管平台。<br>Gerrit除了设置项目权限外，还提供了很好的code review功能。<br>下面分别简单介绍普通Git用法和code review用法</p>
</blockquote>
<h2 id="普通Git使用方法："><a href="#普通Git使用方法：" class="headerlink" title="普通Git使用方法："></a>普通Git使用方法：</h2><p><img src="/posts/2248/git_test.png" alt="logo"></p>
<blockquote>
<p>如上图所示：</p>
<p>Git仓库主要分为：本地仓库（各位clone到本机）和远端仓库（scm负责维护的，搭建在一台服务器上面）；</p>
<p>绝大多数的命令都不需要和远端的git仓库打交道，本地执行即可；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone :克隆一个远端git仓库到本地</div><div class="line">git fetch：获取远端git仓库变化到本地仓库，并不会更改当前工作区文件</div><div class="line">git pull：这个命令相当于：先执行git fetch 然后执行git merge变化到当前工作区</div><div class="line">git push：将本地仓库的变化推送到远端git服务器</div></pre></td></tr></table></figure>
<h2 id="Code-Review使用方法："><a href="#Code-Review使用方法：" class="headerlink" title="Code Review使用方法："></a>Code Review使用方法：</h2><p><img src="/posts/2248/gerrit_test.png" alt="logo"></p>
<blockquote>
<p>如上图所示：<br>    使用Gerrit进行code review一言蔽之就是Gerrit加了个中间层；<br>    本地仓库的变更执行git push提交到Gerrit；code reviewer可以在gerrit上面对本次提交进行review并给出评价；<br>    <img src="/posts/2248/code_review.png" alt="logo"><br>    管理员在review评估ok（至少有一个+2）后，在gerrit上面点击submit，会把本次变更推送到远端仓库。</p>
<blockquote>
<p>PS:+1 +2 -1 -2 0不是数字意义！！！（两个reviewer都给了+1评论并不代表已经+2了）</p>
</blockquote>
</blockquote>
<h2 id="原理解析："><a href="#原理解析：" class="headerlink" title="原理解析："></a>原理解析：</h2><blockquote>
<p>为了实现上面所说的功能，gerrit引入了change_id和for空间；</p>
<blockquote>
<p>我们执行git push到for空间；<br>    如果大家的本地git config没有做过配置，那么咱们执行git push的完整命令是：<br>    git push origin HEAD:refs/heads/master<br>    推送当前本地最新代码到远端（origin）master分支</p>
</blockquote>
</blockquote>
<hr>
<blockquote>
<blockquote>
<p>  使用code review的话执行git push完整命令是：<br>    git push origin HEAD:refs/for/master<br>    推送当前本地最新代码到for空间的master分支供gerrit识别</p>
<p>PS：以上写的都是git原始命令供大家更好的理解，实际使用中可以简写！！！</p>
</blockquote>
</blockquote>
<hr>
<blockquote>
<p>Gerrit根据change-Id识别你的patch；</p>
<blockquote>
<p>我们需要引入commit-msg钩子文件到本地代码库:<br>        （这个是gerrit原生提供的通过scp命令实现）<br>        在本地代码库下运行（将weilong.wang改成自己的用户名），执行一次即可<br>        gitdir=$(git rev-parse –git-dir); scp -p -P 29418 weilong.wang@Gerrit_Server_Ip:hooks/commit-msg ${gitdir}/hooks/</p>
</blockquote>
</blockquote>
<hr>
<blockquote>
<p>commit-msg钩子的作用和使用：<br>1.Dev正常本地修改代码，git add，git commit 会自动在message后面增加算出一个唯一的change-id<br>        例如： Change-Id: I45088f6b73bf53b62b2ee3b09c005952e9838548<br>2.如果本次patch提交到gerrit后，review不通过：本地修改代码， git add， git commit –amend<br>        （更新新的修改到当前commit；同时可以修改commit message；不要对message的最后一行change-id做修改！！！）<br>    接着push到gerrit：因为change-id并没有改变，所以还是同一个地方，patch set增长1</p>
<blockquote>
<p>PS：建议合并最新版本代码到本地：使用git pull –rebase<br>        如果使用git pull： merge点不自动产生change-id！！！</p>
</blockquote>
</blockquote>
<p><img src="/posts/2248/patch.png" alt="logo"></p>
<h2 id="喜闻乐见简化配置："><a href="#喜闻乐见简化配置：" class="headerlink" title="喜闻乐见简化配置："></a>喜闻乐见简化配置：</h2><blockquote>
<p>根据上面的解释大家应该发现想使用gerrit进行code review还得手工做些事情：</p>
<ol>
<li>git clone远端代码库到本地</li>
<li>从远端服务器下载commit-msg钩子到本地仓库.git/hooks/目录</li>
<li>每次都要本地git commit后执行git push origin HEAD:refs/for/master</li>
<li>去gerrit上面添加code reviewers<br>这并不是我想要的生活。。。</li>
</ol>
</blockquote>
<hr>
<blockquote>
<p>一劳永逸方法：</p>
<ol>
<li>git clone远端代码库到本地</li>
<li>从远端服务器下载commit-msg钩子到本地仓库.git/hooks/目录</li>
<li>修改本地代码库config   vi .git/config增加下面内容<br>[remote “review_master”]<br>  url = 代码库地址<br>  push = HEAD:refs/for/master%r=weilong.wang@memblaze.com,r=dev1@memblaze.com</li>
<li>本地git commit后执行git push review_master即可<br>会自动提交到refs/for/master并增加weilong和dev1作为code reviewers;</li>
</ol>
<blockquote>
<p>PS：     remote “review_master” 这个可以换成你喜欢的其他字符串；假如改成remote “haha” 那么最终push的时候执行 git push haha<br>PS：     pushurl这个请自行替换成各位执行git clone的地址<br>PS：     自动添加code reviewers请自行替换成各位项目的同事</p>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;公司使用Gerrit作为代码托管平台。&lt;br&gt;Gerrit除了设置项目权限外，还提供了很好的code review
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Gerrit" scheme="https://0to.github.io/tags/Gerrit/"/>
    
  </entry>
  
  <entry>
    <title>Git tips one</title>
    <link href="https://0to.github.io/posts/60120/"/>
    <id>https://0to.github.io/posts/60120/</id>
    <published>2017-03-31T06:40:12.000Z</published>
    <updated>2017-05-03T08:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件版本："><a href="#软件版本：" class="headerlink" title="软件版本："></a>软件版本：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git version 2.10.1</div></pre></td></tr></table></figure>
<h1 id="Git克隆单个分支："><a href="#Git克隆单个分支：" class="headerlink" title="Git克隆单个分支："></a>Git克隆单个分支：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git clone 地址 —branch br1 —single-branch dir</div><div class="line">        只能看到单独的br1，不能checkout到其他分支。空间占用比较小，适合长期分支开发。</div><div class="line">原理：</div><div class="line">$ git remote -v</div><div class="line">        remote.origin.fetch=+refs/heads/br1:refs/remotes/origin/br1</div><div class="line">恢复完整代码库：</div><div class="line">$ git config remote.origin.fetch &quot;+refs/heads/*:refs/remotes/origin/*&quot;</div><div class="line">    然后执行</div><div class="line">    $ git pull</div></pre></td></tr></table></figure>
<h1 id="Git对-gitignore文件处理："><a href="#Git对-gitignore文件处理：" class="headerlink" title="Git对.gitignore文件处理："></a>Git对.gitignore文件处理：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">已经增加到.gitignore文件里面的目录or文件会被git忽略。</div><div class="line">如果本次需要修改一个忽略文件：</div><div class="line">$ git status --ignored</div><div class="line">            --ignored   -- show ignored files as well</div><div class="line">$ git add -f</div><div class="line">            --force   -f   -- allow adding otherwise ignored files</div></pre></td></tr></table></figure>
<h1 id="Git-commit相关："><a href="#Git-commit相关：" class="headerlink" title="Git commit相关："></a>Git commit相关：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># 空提交,只在特殊情况下使用（产生一个新的commit点）</div><div class="line">$ git commit</div><div class="line">    On branch master</div><div class="line">    Your branch is up-to-date with &apos;origin/master&apos;.</div><div class="line">    nothing to commit, working tree clean</div><div class="line"># 解决方法</div><div class="line">$ git commit -m &quot;empty commit&quot; --allow-empty</div><div class="line"></div><div class="line"></div><div class="line"># 不带message提交（慎用,message很重要）</div><div class="line">$ git commit</div><div class="line">    Aborting commit due to empty commit message.</div><div class="line"># 解决方法</div><div class="line">$ git commit --allow-empty-message</div><div class="line"></div><div class="line"></div><div class="line">把暂存区的变更合并到最新的版本里面，不会产生新的版本(同时可以更新log message)；</div><div class="line">$ git commit --amend</div><div class="line">PS：已经进远端代码库的版本不允许使用--amend进行修改!!!</div></pre></td></tr></table></figure>
<h2 id="Git-merge相关："><a href="#Git-merge相关：" class="headerlink" title="Git merge相关："></a>Git merge相关：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">conflict处理：</div><div class="line"># 使用自己/他人的文件替换冲突文件</div><div class="line">$ git checkout --ours conflict.file</div><div class="line">$ git checkout --theirs conflict.file</div><div class="line"># 增加冲突文件到版本库</div><div class="line">$ git add conflict.file</div><div class="line">$ git commit</div><div class="line"></div><div class="line"></div><div class="line">查看merge commit点已经解决的冲突文件：</div><div class="line">$ git log --cc</div><div class="line">        --cc    -- combined diff format for merge commits</div><div class="line"></div><div class="line"></div><div class="line">分支直接合并建议使用：git merge</div><div class="line">同一分支dev合并 or Temp分支合并建议使用：git rebase 或者 git cherry-pick</div><div class="line">    PS：以上两种都可以合并代码workspace最终文件一样，但是对git来说有不同：merge是环形，rebase和cherry-pick是直线</div><div class="line">    PS：需要注意的是rebase会是自己和他人角色发生反转，解决conflict file的时候需要留心。</div></pre></td></tr></table></figure>
<h2 id="Git-rm相关："><a href="#Git-rm相关：" class="headerlink" title="Git rm相关："></a>Git rm相关：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git rm weilong.txt</div><div class="line">删除workspace和index里面的weilong.txt文件</div><div class="line"></div><div class="line">$ git rm --cached weilong.txt</div><div class="line">删除index里面的weilong.txt文件，workspace里面的文件保留</div></pre></td></tr></table></figure>
<h2 id="Git-log相关："><a href="#Git-log相关：" class="headerlink" title="Git log相关："></a>Git log相关：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$ git log -5</div><div class="line">查看最新的5次版本</div><div class="line"></div><div class="line">$ git log --author=weilong.wang</div><div class="line">查看weilong.wang提交的版本</div><div class="line"></div><div class="line">$ git log --oneline</div><div class="line">一行显示一个版本信息（简化显示版本信息）</div><div class="line"></div><div class="line">$ git log -p</div><div class="line">显示每个版本的具体修改</div><div class="line"></div><div class="line">$ git log --numstat</div><div class="line">显示每个版本 修改文件的行数（5       1       weilong.txt    这个文件本次增加了5行同时也删除了1行）</div><div class="line"></div><div class="line">$ git log --since=&quot;1 month ago&quot;</div><div class="line">显示最近一个月的日志</div><div class="line">$ git log --after=&quot;2016-07-01&quot;</div><div class="line">显示7月1号至今的日志</div><div class="line">$ git log --before=&quot;2 days&quot;</div><div class="line">显示2天之前的日志</div><div class="line">$ git log --until=&quot;2016-07-10T14:30&quot;</div><div class="line">显示7月10号14：30之前的日志</div><div class="line"></div><div class="line"></div><div class="line">$ git log --graph</div><div class="line">图状显示版本 （正常提交时线形的，merge是环形的）</div><div class="line"></div><div class="line">可用于判断分支是否合并：</div><div class="line">$ git log br1 ^master</div><div class="line">显示只在分支br1不在master上的commit点</div><div class="line">$ git log master ^br1</div><div class="line">显示只在分支master不在br1分支上的commit点</div></pre></td></tr></table></figure>
<p><img src="/posts/60120/Git-Cheat-Sheet.png" alt="logo"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;软件版本：&quot;&gt;&lt;a href=&quot;#软件版本：&quot; class=&quot;headerlink&quot; title=&quot;软件版本：&quot;&gt;&lt;/a&gt;软件版本：&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Git" scheme="https://0to.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>使用Jenkins_Gerrit搭建持续集成</title>
    <link href="https://0to.github.io/posts/32389/"/>
    <id>https://0to.github.io/posts/32389/</id>
    <published>2017-03-31T02:46:37.000Z</published>
    <updated>2017-05-03T08:23:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><blockquote>
<p>公司目前使用Gerrit作为代码库托管和Code review平台。 使用Jenkins作为自动化构建和持续集成平台。</p>
</blockquote>
<h2 id="流程设计："><a href="#流程设计：" class="headerlink" title="流程设计："></a>流程设计：</h2><p><img src="/posts/32389/CI.png" alt="logo"></p>
<ol>
<li><p>Dev本地开发，然后上传patch到gerrit：</p>
<ul>
<li>同时触发Jenkins CR_Job来做build</li>
<li>增加Code reviewers来做review</li>
</ul>
</li>
<li><p>再上述都成功的基础上，reviewer点击+2：</p>
<ul>
<li>同时触发Jenkins Submit_Job来做build和test：<ul>
<li>如果成功，自动合并本次patch到代码库</li>
<li>如果失败，返回-1</li>
</ul>
</li>
</ul>
</li>
<li><p>Nightly test Job：</p>
<ul>
<li>每晚20:00触发，获取当前最新的代码进行build和test</li>
</ul>
</li>
</ol>
<blockquote>
<p>测试分级：</p>
<ul>
<li><p>CR_Job:</p>
<ul>
<li>获取触发patch的代码，合并最新分支代码，进行build</li>
<li>快速反馈，主要检查patch合并是否有冲突和build是否能跑通</li>
</ul>
</li>
<li><p>Submit_Job：</p>
<ul>
<li>获取触发patch的代码，合并最新的分支代码，进行build和测试</li>
<li>根据每天代码提交次数来确定时间和test cases</li>
</ul>
</li>
<li><p>Nightly_Job：</p>
<ul>
<li>获取当前最新代码进行build和test</li>
<li>一般跑12h，第二天早上出测试报告邮件</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="软件环境："><a href="#软件环境：" class="headerlink" title="软件环境："></a>软件环境：</h2><table>
<thead>
<tr>
<th>软件</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>Jenkins</td>
<td>1.567</td>
</tr>
<tr>
<td>Gerrit</td>
<td>2.8.6</td>
</tr>
</tbody>
</table>
<ul>
<li>Jenkins插件：</li>
</ul>
<table>
<thead>
<tr>
<th>插件名</th>
<th>版本</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Multijob plugin</td>
<td>2.11.1</td>
<td>定义pipeline</td>
</tr>
<tr>
<td>Gerrit Trigger</td>
<td>1.13</td>
<td>监控Gerrit event</td>
</tr>
</tbody>
</table>
<h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h2><ol>
<li>安装配置Jenkins Gerrit Trigger插件：<a href="https://wiki.jenkins-ci.org/display/JENKINS/Gerrit+Trigger" target="_blank" rel="external">官方wiki</a><br> <img src="/posts/32389/Gerrit_Trigger.png" alt="logo"></li>
<li>安装Jenkins Multijob plugin：<a href="https://wiki.jenkins-ci.org/display/JENKINS/Multijob+Plugin" target="_blank" rel="external">官方wiki</a><br> <img src="/posts/32389/multi_jobs.png" alt="logo"></li>
<li>配置CR_Job:<br> <img src="/posts/32389/CR_Job.png" alt="logo"></li>
<li>配置Submit_job:<br> <img src="/posts/32389/submit_job.png" alt="logo"></li>
<li>配置Nightly_Job:<br> <img src="/posts/32389/nightly_job.png" alt="logo"></li>
</ol>
<h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><ol>
<li>以上内容都是基于公司研发现状定制的，建议各位根据自己的情况进行定制。</li>
<li>因为历史遗留原因，当前使用的版本比较旧。 例如如果升级到jenkins2.x版本的话pipeline就不需要借助插件来实现了。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景：&quot;&gt;&lt;a href=&quot;#背景：&quot; class=&quot;headerlink&quot; title=&quot;背景：&quot;&gt;&lt;/a&gt;背景：&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;公司目前使用Gerrit作为代码库托管和Code review平台。 使用Jenkins作为自动化构建和持
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Gerrit" scheme="https://0to.github.io/tags/Gerrit/"/>
    
      <category term="Jenkins" scheme="https://0to.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins常用插件</title>
    <link href="https://0to.github.io/posts/51385/"/>
    <id>https://0to.github.io/posts/51385/</id>
    <published>2017-01-24T10:18:19.000Z</published>
    <updated>2017-04-06T11:21:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件版本："><a href="#软件版本：" class="headerlink" title="软件版本："></a>软件版本：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jenkins 1.567</div></pre></td></tr></table></figure>
<ul>
<li><p>build-user-vars-plugin<br>  <a href="https://wiki.jenkins-ci.org/display/JENKINS/Build+User+Vars+Plugin" target="_blank" rel="external">https://wiki.jenkins-ci.org/display/JENKINS/Build+User+Vars+Plugin</a><br>  用途：获取构建的执行人信息 需要在job配置中勾选Set jenkins user build variables</p>
</li>
<li><p>gerrit-trigger<br>  <a href="https://wiki.jenkins-ci.org/display/JENKINS/Gerrit+Trigger" target="_blank" rel="external">https://wiki.jenkins-ci.org/display/JENKINS/Gerrit+Trigger</a><br>  用途：打通gerit和jenkins 主要用于：gerrit事件触发jenkins job，jenkins job执行结果反写回gerrit</p>
</li>
<li><p>thinBackup<br>  <a href="https://wiki.jenkins-ci.org/display/JENKINS/thinBackup" target="_blank" rel="external">https://wiki.jenkins-ci.org/display/JENKINS/thinBackup</a><br>  用途：备份jenkins配置和job配置</p>
</li>
<li><p>saferestart<br>  <a href="https://wiki.jenkins-ci.org/display/JENKINS/SafeRestart+Plugin" target="_blank" rel="external">https://wiki.jenkins-ci.org/display/JENKINS/SafeRestart+Plugin</a><br>  用途：提供一个按钮来安全重启jenkins 点击后，如果有job正在执行那么等job执行完毕后会重启jenkins，点击后再加进来的job会等待重启完成后执行。</p>
</li>
<li><p>jobConfigHistory<br>  <a href="https://wiki.jenkins-ci.org/display/JENKINS/JobConfigHistory+Plugin" target="_blank" rel="external">https://wiki.jenkins-ci.org/display/JENKINS/JobConfigHistory+Plugin</a><br>  用途：记录每次job配置变更，支持查找历史版本和回滚</p>
</li>
<li><p>rebuild<br>  <a href="https://wiki.jenkins-ci.org/display/JENKINS/Rebuild+Plugin" target="_blank" rel="external">https://wiki.jenkins-ci.org/display/JENKINS/Rebuild+Plugin</a><br>  用途：增加rebuild按钮用来使用相同的参数再次执行构建 gerrit触发的job 要使用 Retrigger 而不是rebuild</p>
</li>
<li><p>jenkins-multijob-plugin<br>  <a href="https://wiki.jenkins-ci.org/display/JENKINS/Multijob+Plugin" target="_blank" rel="external">https://wiki.jenkins-ci.org/display/JENKINS/Multijob+Plugin</a><br>  用途：多个job组成工作流 优点：比其它组job流的插件多了最终收集结果功能，而且界面配置简单，功能强大</p>
</li>
<li><p>multiple-scms<br>  <a href="https://wiki.jenkins-ci.org/display/JENKINS/Multiple+SCMs+Plugin" target="_blank" rel="external">https://wiki.jenkins-ci.org/display/JENKINS/Multiple+SCMs+Plugin</a><br>  用途：job支持多个git工程 并且可以配置下载代码到指定目录</p>
</li>
<li><p>Copy Artifact Plugin<br>  <a href="https://wiki.jenkins-ci.org/display/JENKINS/Copy+Artifact+Plugin" target="_blank" rel="external">https://wiki.jenkins-ci.org/display/JENKINS/Copy+Artifact+Plugin</a><br>  用途：拷贝其它job的指定产出物</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;软件版本：&quot;&gt;&lt;a href=&quot;#软件版本：&quot; class=&quot;headerlink&quot; title=&quot;软件版本：&quot;&gt;&lt;/a&gt;软件版本：&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Jenkins" scheme="https://0to.github.io/tags/Jenkins/"/>
    
  </entry>
  
</feed>
