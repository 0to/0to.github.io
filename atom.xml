<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Just Do IT</title>
  
  <subtitle>Yesterday You Said Tomorrow.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://0to.github.io/"/>
  <updated>2020-10-13T06:50:36.055Z</updated>
  <id>https://0to.github.io/</id>
  
  <author>
    <name>Weilong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Centos7 升级git版本 - 源码编译安装</title>
    <link href="https://0to.github.io/posts/22197/"/>
    <id>https://0to.github.io/posts/22197/</id>
    <published>2020-10-13T06:30:06.000Z</published>
    <updated>2020-10-13T06:50:36.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>原生Centos7系统的yum源自带git版本是1.8.3.1。</p><p>这个版本诞生于：10-Jun-2013。</p><p>很多新特性都不支持，为了更好的使用git，我们需要进行版本升级。</p><h1 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h1><ol><li><p>安装相关依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc</span><br><span class="line"># yum install  gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure></li><li><p>卸载当前git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum remove git</span><br></pre></td></tr></table></figure></li><li><p>下载新版本源码包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">官方仓库地址：https://mirrors.edge.kernel.org/pub/software/scm/git/</span><br><span class="line">当前最新版本：git-2.28.0.tar.xz       27-Jul-2020</span><br><span class="line"></span><br><span class="line"># wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.28.0.tar.xz</span><br></pre></td></tr></table></figure></li><li><p>源码编译安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># tar -xvf git-2.28.0.tar.xz</span><br><span class="line"># cd git-2.28.0/</span><br><span class="line"># which openssl  获取本机openssl路径，当前机器/usr/bin/openssl</span><br><span class="line"># ./configure --with-openssl=/usr/bin/openssl</span><br><span class="line"># make prefix=/usr/local/git all</span><br><span class="line"># make prefix=/usr/local/git install</span><br><span class="line"># echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/profile</span><br><span class="line"># source /etc/profile</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;原生Centos7系统的yum源自带git版本是1.8.3.1。&lt;/p&gt;
&lt;p&gt;这个版本诞生于：10-Jun-2013。&lt;/p&gt;
&lt;p&gt;很多
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Git" scheme="https://0to.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins Windows batch build stuck on final exit</title>
    <link href="https://0to.github.io/posts/15762/"/>
    <id>https://0to.github.io/posts/15762/</id>
    <published>2020-07-09T16:45:02.000Z</published>
    <updated>2020-07-09T17:15:31.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统软件环境"><a href="#系统软件环境" class="headerlink" title="系统软件环境"></a>系统软件环境</h1><table><thead><tr><th>系统软件</th><th>版本</th></tr></thead><tbody><tr><td>Jenkins</td><td>2.150.2</td></tr><tr><td>Slave</td><td>Windows 10</td></tr></tbody></table><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>部分 Windows slave job 执行时间较长，日志分析发现不是Job脚本更新导致，而是因为Jenkins退出卡住。<br>日志分析：<img src="/posts/15762/jenkins1.png" alt="案例"><br>具体任务在13:41就已经执行完成，但是Jenkins在13:51才退出返回结果。<br>也就是说整整卡住了10分钟，必须要解决。</p><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>Jenkins 在 2.14 版本引入了 killSoftly 特性，出发点是想更加优雅的结束进程。<br>但是导致了 Windows slave上的 batch 脚本 执行完成 返回结果卡住（时间不确定）的情况。<br>Linux slave上的 shell 脚本执行退出没有发现此问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// Firstly try to kill the root process gracefully, then do a forcekill if it does not help (algorithm is described in JENKINS-17116)</span><br><span class="line"></span><br><span class="line">killSoftly();</span><br></pre></td></tr></table></figure></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>可以通过 在Windows slave连接master机器的时候 增加 这个参数 -DSoftKillWaitSeconds=0 来解决。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Run from agent command line:</span><br><span class="line"></span><br><span class="line">java -Xrs -DSoftKillWaitSeconds=0 -jar agent.jar -jnlpUrl ...</span><br></pre></td></tr></table></figure></p><p>使用上述命令重新连接 Master - Slave 后，可以在Slave系统信息界面看到参数生效了。<br><img src="/posts/15762/jenkins2.png" alt="Slave信息"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://issues.jenkins-ci.org/browse/JENKINS-55106" target="_blank" rel="noopener">https://issues.jenkins-ci.org/browse/JENKINS-55106</a><br><a href="https://stackoverflow.com/questions/54039226/jenkins-hangs-between-build-and-post-build" target="_blank" rel="noopener">https://stackoverflow.com/questions/54039226/jenkins-hangs-between-build-and-post-build</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系统软件环境&quot;&gt;&lt;a href=&quot;#系统软件环境&quot; class=&quot;headerlink&quot; title=&quot;系统软件环境&quot;&gt;&lt;/a&gt;系统软件环境&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;系统软件&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/th
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Jenkins" scheme="https://0to.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>使用SHA256代替MD5进行文件校验</title>
    <link href="https://0to.github.io/posts/9613/"/>
    <id>https://0to.github.io/posts/9613/</id>
    <published>2020-03-09T13:25:45.000Z</published>
    <updated>2020-03-09T14:04:38.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>第三方客户审厂过程中，对公司现有流程管理方法工具有些改进建议。<br>其中有一条是：软件映像文件的完整性检验为MD5值，校验码和软件包一起发布，建议采用其它安全性更好的校验算法。</p><h1 id="方案调研"><a href="#方案调研" class="headerlink" title="方案调研"></a>方案调研</h1><h4 id="参考链接：-为什么MD5不能用于存储密码"><a href="#参考链接：-为什么MD5不能用于存储密码" class="headerlink" title="参考链接： 为什么MD5不能用于存储密码"></a>参考链接： <a href="https://draveness.me/whys-the-design-password-with-md5" target="_blank" rel="noopener">为什么MD5不能用于存储密码</a></h4><p>MD5 是一种摘要算法，我们也可以叫它哈希函数，哈希函数可以将无限键值空间中的所有键都均匀地映射到一个指定大小的键值空间中。一个好的摘要算法能够帮助我们保证文件的完整性，避免攻击者的恶意篡改。<br>作为一个 1992 年第一次被公开的算法，到今天为止已经被发现了一些致命的漏洞。在任何场景下，我们都应该避免MD5的使用，可以选择更好的摘要算法替代 MD5，例如 SHA256、SHA512。</p><h1 id="改进方案"><a href="#改进方案" class="headerlink" title="改进方案"></a>改进方案</h1><ul><li>保留现有的md5校验文件（部分客户还在使用）</li><li>同时增加SHA256校验文件</li></ul><h1 id="基础命令使用"><a href="#基础命令使用" class="headerlink" title="基础命令使用"></a>基础命令使用</h1><ol><li><p>SHA256</p><ul><li><p>生成XXX文件sha256值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sha256sum XXX &gt; XXX.sha256</span><br><span class="line"></span><br><span class="line">[root@wangweilong wwl]# sha256sum clean_virus.sh &gt; clean_virus.sh.sha256</span><br></pre></td></tr></table></figure></li><li><p>追加YYY文件到已有sha256文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sha256sum YYY &gt;&gt; XXX.sha256</span><br><span class="line"></span><br><span class="line">[root@wangweilong wwl]# sha256sum install.log &gt;&gt; clean_virus.sh.sha256</span><br></pre></td></tr></table></figure></li><li><p>生成的sha256文件内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@wangweilong wwl]# cat clean_virus.sh.sha256</span><br><span class="line"></span><br><span class="line">799750ecaf018307e3f3a5b69c69d28635bf047472e99c85f094ef210deb8ac9  clean_virus.sh</span><br><span class="line">328de949506461ffb371cb2e951d25aadb9e94d7c3038bb08aebce42cd8b84ee  install.log</span><br></pre></td></tr></table></figure></li><li><p>校验方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">下载文件和对应的md5值文件到同一目录下,执行 sha256sum -c XXX.sha256 命令</span><br><span class="line"></span><br><span class="line">[root@wangweilong test]# sha256sum -c clean_virus.sh.sha256</span><br><span class="line"></span><br><span class="line">clean_virus.sh: OK</span><br><span class="line">install.log: OK</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><ol start="2"><li><p>MD5</p><ul><li><p>生成XXX文件md5值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">md5sum XXX &gt; XXX.md5</span><br><span class="line"></span><br><span class="line">[root@wangweilong wwl]# md5sum clean_virus.sh &gt; clean_virus.sh.md5</span><br></pre></td></tr></table></figure></li><li><p>追加YYY文件到已有md5文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">md5sum YYY &gt;&gt; XXX.md5</span><br><span class="line"></span><br><span class="line">[root@wangweilong wwl]# md5sum install.log &gt;&gt; clean_virus.sh.md5</span><br></pre></td></tr></table></figure></li><li><p>生成的md5文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@p5-centos6-wangweilong wwl]# cat clean_virus.sh.md5</span><br><span class="line"></span><br><span class="line">7840489fe303c097fb142a982f9f41e7  clean_virus.sh</span><br><span class="line">16c04079cc2cda26cbab5cfa801df6c6  install.log</span><br></pre></td></tr></table></figure></li><li><p>校验方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">下载文件和对应的md5值文件到同一目录下,执行md5sum -c XXX.md5 命令</span><br><span class="line">为了更好的展示，我修改了install.log文件的内容</span><br><span class="line"></span><br><span class="line">[root@wangweilong test]# md5sum -c clean_virus.sh.md5</span><br><span class="line"></span><br><span class="line">clean_virus.sh: OK</span><br><span class="line">install.log: FAILED</span><br><span class="line">md5sum: WARNING: 1 of 2 computed checksums did NOT match</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;第三方客户审厂过程中，对公司现有流程管理方法工具有些改进建议。&lt;br&gt;其中有一条是：软件映像文件的完整性检验为MD5值，校验码和软件包一起发
      
    
    </summary>
    
      <category term="SYS" scheme="https://0to.github.io/categories/SYS/"/>
    
    
      <category term="Admin" scheme="https://0to.github.io/tags/Admin/"/>
    
  </entry>
  
  <entry>
    <title>Jira&amp;&amp;Confluence-简介</title>
    <link href="https://0to.github.io/posts/43943/"/>
    <id>https://0to.github.io/posts/43943/</id>
    <published>2019-11-28T02:56:15.000Z</published>
    <updated>2020-03-09T14:18:48.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Atlassian公司简介："><a href="#Atlassian公司简介：" class="headerlink" title="Atlassian公司简介："></a>Atlassian公司简介：</h1><p>官网: <a href="https://www.atlassian.com" target="_blank" rel="noopener">https://www.atlassian.com</a><br>Atlassian, inspired by the Greek Titan. list on the NASDAQ under TEAM 2015.<br>Mission: Move work forward. Atlassian helps teams work smarter and faster, together.</p><hr><h1 id="主要产品："><a href="#主要产品：" class="headerlink" title="主要产品："></a>主要产品：</h1><table><thead><tr><th style="text-align:left">产品名称</th><th style="text-align:left">简介</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">Jira</td><td style="text-align:left">Project and issue tracking</td><td style="text-align:left">项目管理系统</td></tr><tr><td style="text-align:left">Confluence</td><td style="text-align:left">Document collaboration</td><td style="text-align:left">知识库系统</td></tr><tr><td style="text-align:left">Trello</td><td style="text-align:left">Collaborate visually on any project</td><td style="text-align:left">简单的团队协作系统<br>适合个人或者小团队使用</td></tr><tr><td style="text-align:left">Bitbucket</td><td style="text-align:left">Git code management</td><td style="text-align:left">代码库托管系统<br>支持权限管理/code review等等<br>类比Github</td></tr><tr><td style="text-align:left">Bamboo</td><td style="text-align:left">Integration and release management</td><td style="text-align:left">自动化系统<br>类比Jenkins</td></tr><tr><td style="text-align:left">Sourcetree</td><td style="text-align:left">Git and Mercurial desktop client</td><td style="text-align:left">git客户端</td></tr><tr><td style="text-align:left">Fisheye</td><td style="text-align:left">Search, monitor, and track across SVN, Git, and Perforce repositories</td><td style="text-align:left">代码库查询展示系统<br>支持多种代码库</td></tr><tr><td style="text-align:left">Crucible</td><td style="text-align:left">Find bugs and improve code quality through peer code review</td><td style="text-align:left">code review系统<br>类比Phabricator</td></tr></tbody></table><hr><h1 id="产品形态"><a href="#产品形态" class="headerlink" title="产品形态"></a>产品形态</h1><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">简介</th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th><th style="text-align:left">适用场景</th><th style="text-align:left">付款策略</th></tr></thead><tbody><tr><td style="text-align:left">Cloud</td><td style="text-align:left">ATLASSIAN公司搭建运维云服务</td><td style="text-align:left">1.开箱即用<br>2.运维容灾由ATLASSIAN公司保障<br>3.新版本升级支持<br>4.日常使用问题支持</td><td style="text-align:left">1. 国内访问速度慢<br>2. 数据托管在cloud</td><td style="text-align:left">1.快速使用 <br>2.多地点使用<br>3.运维能力一般</td><td style="text-align:left">per year</td></tr><tr><td style="text-align:left">Server</td><td style="text-align:left">公司自行搭建运维服务</td><td style="text-align:left">1.自行定制配置搭建<br>2.数据信息存储在自家服务器上<br>3.访问速度快</td><td style="text-align:left">自行负责运维（服务/网络）</td><td style="text-align:left">1.数据保密/安全要求较高<br>2.运维能力较强团队</td><td style="text-align:left">one-time payment<br>服务可以一直使用<br>包含12个月内的新版本升级支持<br>如果12个月后还想升级版本的话，需要重新付费</td></tr><tr><td style="text-align:left">Data Center</td><td style="text-align:left">公司自行搭建运维服务<br>官方提供扩展数据/服务容灾支持</td><td style="text-align:left">1.数据多节点存储<br>2.负载均衡<br>3.集群支持</td><td style="text-align:left">价格太贵了</td><td style="text-align:left">1.大中型企业级用户（500+）<br>2.容灾安全/负载均衡要求较高<br>3.跨多地区团队</td><td style="text-align:left">per year</td></tr></tbody></table><hr><h2 id="工具链选型"><a href="#工具链选型" class="headerlink" title="工具链选型"></a>工具链选型</h2><ol><li>项目管理系统： Jira Server</li><li>公司知识库系统： Confluence Server</li><li>公司代码库： Bitbucket/Git（code review）</li><li>自动化平台： Jenkins （Bamboo正在内部试用调研）</li></ol><hr><h2 id="选型思路"><a href="#选型思路" class="headerlink" title="选型思路"></a>选型思路</h2><p>0.为什么是Jira Server？</p><ul><li>公司项目研发团队在中国，Cloud访问速度慢；</li><li>公司现有研发体量不需要过度支持，所以不考虑Data Center；</li><li>运维团队比较强力，可以做到服务器高可用支持；</li><li>IOS/Android 客户端支持；</li><li>流程/字段定制功能强大，项目支持方便。</li></ul><p>1.为什么是Confluence Server？</p><ul><li>和Jira打通非常方便，联动性很好；</li><li>系统自带的模版页面非常适合特定场景使用；</li><li>易用性很好，学习成本很低；</li><li>多人协同编辑可视化很好；</li><li>IOS/Android 客户端支持</li></ul><p>2.为什么是Bitbucket Server？</p><ul><li>原有的Gerrit版本比较老，易用性不好；</li><li>Gitlab / Bitbucket 都可以满足团队代码托管 / code review / 系统集成的需要；</li><li>选择 Bitbucket 主要是和Jira &amp;&amp; Confluence原生打通非常方便，联动性很好；</li><li>源代码是公司核心资产，从安全性考虑，暂时不准备开放公网访问。</li></ul><p>3.为什么是Jenkins？</p><ul><li>已经使用Jenkins很长时间了，团队人员比较熟悉；</li><li>通过二次开发，Jenkins能满足当前项目使用；</li><li>Bamboo 在Jira &amp;&amp; Bitbucket联动性上会比Jenkins好；</li><li>Bamboo是根据挂载的Remote agents数量进行收费，Jenkins是免费的；</li><li>因为项目特殊性，需要用到多Slave挂载，从成本角度考虑还是使用Jenkins更适合。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Atlassian公司简介：&quot;&gt;&lt;a href=&quot;#Atlassian公司简介：&quot; class=&quot;headerlink&quot; title=&quot;Atlassian公司简介：&quot;&gt;&lt;/a&gt;Atlassian公司简介：&lt;/h1&gt;&lt;p&gt;官网: &lt;a href=&quot;https://w
      
    
    </summary>
    
      <category term="PM" scheme="https://0to.github.io/categories/PM/"/>
    
    
      <category term="jira" scheme="https://0to.github.io/tags/jira/"/>
    
      <category term="confluence" scheme="https://0to.github.io/tags/confluence/"/>
    
  </entry>
  
  <entry>
    <title>Gerrit LDAP: Allow to configure multiple accountBase and groupBase values</title>
    <link href="https://0to.github.io/posts/42921/"/>
    <id>https://0to.github.io/posts/42921/</id>
    <published>2019-10-11T03:46:37.000Z</published>
    <updated>2019-10-11T04:34:53.584Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul><li>Gerrit官方文档: <a href="https://www.gerritcodereview.com/config-gerrit.html" target="_blank" rel="noopener">Gerritcodereview</a></li><li>Github issue: <a href="https://github.com/kbrebanov/ansible-gerrit/issues/15" target="_blank" rel="noopener">Github</a></li></ul><h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>搭建了Openldap维护公司域账户信息，Gerrit用户验证接入了LDAP。<br>gerrit.config配置如下（信息请更新为各自公司节点）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ldap]</span><br><span class="line">  server = ldap://ldap.example.com</span><br><span class="line">  username = ldapuser</span><br><span class="line">  accountBase = ou=people,dc=example,dc=com</span><br><span class="line">  groupBase = ou=groups,dc=example,dc=com</span><br></pre></td></tr></table></figure></p><h2 id="业务需求："><a href="#业务需求：" class="headerlink" title="业务需求："></a>业务需求：</h2><p>公司特定合作伙伴 有 访问代码库 进行 联合开发的需求。</p><h2 id="方案设计："><a href="#方案设计：" class="headerlink" title="方案设计："></a>方案设计：</h2><ol><li>在现有LDAP节点的基础上，增加一个ou（custom），用来维护合作伙伴账号；</li><li>同步 这个ou（custom）的人员到Gerrit上。</li></ol><hr><h2 id="配置Gerrit支持多ou-user信息："><a href="#配置Gerrit支持多ou-user信息：" class="headerlink" title="配置Gerrit支持多ou user信息："></a>配置Gerrit支持多ou user信息：</h2><p>根据Gerrit官方文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ldap.accountBase</span><br><span class="line">    Root of the tree containing all user accounts. This is typically of the form ou=people,dc=example,dc=com.</span><br><span class="line">    This setting may be added multiple times to specify more than one root.</span><br></pre></td></tr></table></figure></p><p>我们调整gerrit.config配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ldap]</span><br><span class="line">  server = ldap://ldap.example.com</span><br><span class="line">  username = ldapuser</span><br><span class="line">  accountBase = ou=people,dc=example,dc=com</span><br><span class="line">  accountBase = ou=custom,dc=example,dc=com</span><br><span class="line">  groupBase = ou=groups,dc=example,dc=com</span><br></pre></td></tr></table></figure></p><p>然后重启Gerrit后，custom里面的人员也可以登录Gerrit了。</p><hr><h2 id="配置Gerrit支持多group信息："><a href="#配置Gerrit支持多group信息：" class="headerlink" title="配置Gerrit支持多group信息："></a>配置Gerrit支持多group信息：</h2><p>方法和上面同步多个ou user信息相似，增加ldap.groupBase行即可。<br>根据Gerrit官方文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ldap.groupBase</span><br><span class="line">    Root of the tree containing all group objects. This is typically of the form ou=groups,dc=example,dc=com.</span><br><span class="line">    This setting may be added multiple times to specify more than one root.</span><br></pre></td></tr></table></figure></p><h3 id="关于LDAP-group信息："><a href="#关于LDAP-group信息：" class="headerlink" title="关于LDAP group信息："></a>关于LDAP group信息：</h3><p>一般系统接入LDAP做账户验证，只需同步LDAP的user信息，不直接使用LDAP的group信息。<br>各个系统自行创建系统组进行人员权限管理，这样更加灵活。<br>同时，也不建议LDAP里面维护太多group，更加推荐LDAP轻量化使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;参考链接：&quot;&gt;&lt;a href=&quot;#参考链接：&quot; class=&quot;headerlink&quot; title=&quot;参考链接：&quot;&gt;&lt;/a&gt;参考链接：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Gerrit官方文档: &lt;a href=&quot;https://www.gerritcodereview.co
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Gerrit" scheme="https://0to.github.io/tags/Gerrit/"/>
    
  </entry>
  
  <entry>
    <title>Git tips two</title>
    <link href="https://0to.github.io/posts/31267/"/>
    <id>https://0to.github.io/posts/31267/</id>
    <published>2019-09-23T10:51:04.000Z</published>
    <updated>2019-09-23T11:45:10.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件版本："><a href="#软件版本：" class="headerlink" title="软件版本："></a>软件版本：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version 2.23.0</span><br></pre></td></tr></table></figure><h2 id="使用http-https协议代码库地址，有时会出现不能存储密码，每次交互操作都需要输入帐户密码情况："><a href="#使用http-https协议代码库地址，有时会出现不能存储密码，每次交互操作都需要输入帐户密码情况：" class="headerlink" title="使用http/https协议代码库地址，有时会出现不能存储密码，每次交互操作都需要输入帐户密码情况："></a>使用http/https协议代码库地址，有时会出现不能存储密码，每次交互操作都需要输入帐户密码情况：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">记住密码（默认15分钟）：git config --global credential.helper cache</span><br><span class="line">自己定义时间（一小时后失效）：git config credential.helper &apos;cache --timeout=3600&apos;</span><br><span class="line">永久存储密码：git config --global credential.helper store</span><br></pre></td></tr></table></figure><h2 id="行结束符处理："><a href="#行结束符处理：" class="headerlink" title="行结束符处理："></a>行结束符处理：</h2><table><thead><tr><th>OS</th><th style="text-align:center">Line Endings</th><th style="text-align:right">Comments</th></tr></thead><tbody><tr><td>Windows</td><td style="text-align:center">CRLF</td><td style="text-align:right">每行结尾是 &lt;换行&gt;&lt;回车 &gt; ，即 \n\r</td></tr><tr><td>Mac OS X</td><td style="text-align:center">LF</td><td style="text-align:right">每行结尾只有 &lt;换行&gt; ，即 \n</td></tr><tr><td>Unix/Linux</td><td style="text-align:center">LF</td><td style="text-align:right">每行结尾只有 &lt;换行&gt; ，即 \n</td></tr><tr><td>Classic macOS</td><td style="text-align:center">CR</td><td style="text-align:right">每行结尾是 &lt;回车&gt;，即 \r</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">排除老Mac系统不讨论，项目组如果不是全Windows环境开发/部署的话，还是要自动处理下行结束符。</span><br><span class="line"></span><br><span class="line"># Windows用户执行下面配置命令：</span><br><span class="line">$ git config --global core.autocrlf true # 在提交时自动地把行结束符CRLF转换成LF，而在签出代码时把LF转换成CRLF</span><br><span class="line"></span><br><span class="line"># Linux 和 Mac用户执行下面配置命令：（预防代码库已经有CRLF结束符的代码）</span><br><span class="line">$ git config --global core.autocrlf input # 在提交时把CRLF转换成LF，签出时不转换</span><br><span class="line"></span><br><span class="line"># 默认配置：</span><br><span class="line">$ git config --global core.autocrlf false # 提交和签出时都不对代码行结束符做转换</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;软件版本：&quot;&gt;&lt;a href=&quot;#软件版本：&quot; class=&quot;headerlink&quot; title=&quot;软件版本：&quot;&gt;&lt;/a&gt;软件版本：&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Git" scheme="https://0to.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git 历史删除文件</title>
    <link href="https://0to.github.io/posts/1056/"/>
    <id>https://0to.github.io/posts/1056/</id>
    <published>2018-07-18T07:23:19.000Z</published>
    <updated>2018-07-18T10:50:49.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><ul><li>Github: <a href="https://help.github.com/articles/removing-files-from-a-repository-s-history/" target="_blank" rel="noopener">Removing files from a repository’s history</a></li><li>Github: <a href="https://help.github.com/articles/removing-sensitive-data-from-a-repository/" target="_blank" rel="noopener">Removing sensitive data from a repository</a></li><li>Git-scm: <a href="https://git-scm.com/docs/git-filter-branch" target="_blank" rel="noopener">git-filter-branch</a></li><li>bfg-repo-cleaner: <a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="noopener">bfg-repo-cleaner</a></li></ul><hr><h1 id="场景1"><a href="#场景1" class="headerlink" title="场景1:"></a>场景1:</h1><p>最新的一个提交版本里面新增了敏感、较大、无意义的文件，需要进行清理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 删除文件</span><br><span class="line">    $ git rm --cached $&#123;文件绝对地址&#125;</span><br><span class="line">2. 增加到上述文件到 .gitignore</span><br><span class="line">    $ vim .gitignore</span><br><span class="line">3. 修复最新提交版本</span><br><span class="line">    $ git commit --amend</span><br><span class="line">4. 推送新版本到远端仓库</span><br><span class="line">    如果刚才版本已经推送到远端仓库：</span><br><span class="line">        $ git push -f</span><br><span class="line">    如果刚才版本只是在本地仓库：</span><br><span class="line">        $ git push</span><br></pre></td></tr></table></figure></p><hr><h1 id="场景2"><a href="#场景2" class="headerlink" title="场景2:"></a>场景2:</h1><p>历史版本里面存在敏感、较大、无意义的文件，需要进行清理。</p><h3 id="使用-git-filter-branch"><a href="#使用-git-filter-branch" class="headerlink" title="使用 git filter-branch"></a>使用 git filter-branch</h3><p>git 原生提供的命令，如果没有的话，请先升级机器git版本。</p><ul><li>原理：<br>  扫描代码库所有版本<pre><code>如果某个版本里面发现了指定的文件OR目录：    如果此版本包含要清理的文件OR目录 和 其它变更的话，对此版本进行删除指定文件OR目录（保留其它变更），并生成新的版本。同时后面的版本会变基到新版本。    如果此版本只包含要清理的文件OR目录变更的话，那么此版本会被清除。同时后面的版本会变基到上一个版本。如果版本没有包含指定文件OR目录，那么继续遍历。</code></pre></li><li>PS：<ol><li>如果代码库历史比较多 OR 涉及到指定文件OR目录的版本比较多，那么命令执行会比较慢。</li><li>一般会导致代码库版本树变化，对于涉及开发同学，建议开始前提交本地修改变更到远端仓库，完成后本机重新clone代码库进行开发。</li><li>一般都在本地仓库根目录执行</li><li>执行命令后历史版本里面已经清理了文件, 但是我们的本地仓库里面仍然保留了这些objects, 等待垃圾回收(GC), 如果想立即回收本地仓库空间可以执行 git gc –prune=now.</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 执行命令</span><br><span class="line">    $ git filter-branch --force --index-filter &apos;git rm --cached -r --ignore-unmatch $&#123;要清理的文件OR目录的绝对地址&#125;&apos; --prune-empty --tag-name-filter cat -- --all</span><br><span class="line">2. 增加到上述文件OR目录到 .gitignore</span><br><span class="line">    $ vim .gitignore</span><br><span class="line">3. 推送新版本到远端仓库</span><br><span class="line">    $ git push -f --all</span><br><span class="line">    $ git push -f --tags</span><br><span class="line">4. 清理本地仓库残留的git objects</span><br><span class="line">    $ git reflog expire --expire=now --all</span><br><span class="line">    $ git gc --prune=now</span><br></pre></td></tr></table></figure><h3 id="使用-bfg-repo-cleaner"><a href="#使用-bfg-repo-cleaner" class="headerlink" title="使用 bfg-repo-cleaner"></a>使用 bfg-repo-cleaner</h3><p>Roberto Tyley使用Scala语言写了 bfg-repo-cleaner工具。<br>可以简单理解为一个轻量级的 git filter-branch。<br>使用比较简单，功能比较强大，只需要下载最新的jar包，然后执行👇命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除大于50M的文件</span><br><span class="line">$ java -jar bfg.jar --no-blob-protection --strip-blobs-bigger-than 50M</span><br><span class="line"># 删除指定文件</span><br><span class="line">$ java -jar bfg.jar --no-blob-protection --delete-files $&#123;要清理的文件的绝对地址&#125;</span><br></pre></td></tr></table></figure></p><p>PS:</p><pre><code>1. bfg-repo-cleaner 有个protect功能，默认HEAD是受保护的。    受保护的分支最新版本如果涉及需要清理文件，那么并不会成功。    --no-blob-protection  关闭protect功能    --protect-blobs-from ${分支1},${分支2} 增加受保护的分支2. 建议在本地仓库根目录执行。</code></pre><hr><h1 id="场景3"><a href="#场景3" class="headerlink" title="场景3:"></a>场景3:</h1><p>查找代码库里面较大文件方法：</p><pre><code>- 如果当前版本还存在的文件，可以直接du排序来识别；- 如果当前版本不存在，但是历史中出现过的大文件，可以按照下面步骤来查询。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 显示比较大的pack</span><br><span class="line">$ du -ah .git/objects/pack</span><br></pre></td></tr></table></figure><p><img src="/posts/1056/git1.png" alt="logo"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2. 识别object,对输出的第三列信息即文件大小进行排序</span><br><span class="line">$ git verify-pack -v .git/objects/pack/$&#123;pack-XXX.pack&#125; | sort -k 3 -n | tail -5</span><br></pre></td></tr></table></figure></p><p><img src="/posts/1056/git2.png" alt="logo"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3. 识别object对应的文件</span><br><span class="line">$ git rev-list --objects --all | grep $&#123;👆获取的object&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/posts/1056/git3.png" alt="logo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考链接：&quot;&gt;&lt;a href=&quot;#参考链接：&quot; class=&quot;headerlink&quot; title=&quot;参考链接：&quot;&gt;&lt;/a&gt;参考链接：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Github: &lt;a href=&quot;https://help.github.com/articles/re
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Git" scheme="https://0to.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Nexus3搭建npm私服</title>
    <link href="https://0to.github.io/posts/20597/"/>
    <id>https://0to.github.io/posts/20597/</id>
    <published>2018-06-25T10:46:34.000Z</published>
    <updated>2018-06-25T12:02:42.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><ul><li>官方文档：<a href="https://help.sonatype.com/repomanager3/node-packaged-modules-and-npm-registries" target="_blank" rel="noopener">node-packaged-modules-and-npm-registries</a></li></ul><h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>随着公司前端团队的扩大，需要拆分出公司基础模块供其它项目使用，使用Nexus3搭建公司npm私服。</p><h1 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h1><h3 id="1-创建npm库："><a href="#1-创建npm库：" class="headerlink" title="1. 创建npm库："></a>1. 创建npm库：</h3><p><img src="/posts/20597/npm_create1.png" alt="logo"><br><img src="/posts/20597/npm_create2.png" alt="logo"><br><img src="/posts/20597/npm_create3.png" alt="logo"><br><img src="/posts/20597/npm_create4.png" alt="logo"></p><h3 id="2-权限配置："><a href="#2-权限配置：" class="headerlink" title="2. 权限配置："></a>2. 权限配置：</h3><ul><li>激活 npm Bearer Token Realm<br><img src="/posts/20597/npm_realms.png" alt="logo"></li><li>创建开发权限组对hosted npm私服库读写权限<br><img src="/posts/20597/group.png" alt="logo"><br><img src="/posts/20597/group2.png" alt="logo"></li><li>创建dev帐户并加入到开发权限组<br><img src="/posts/20597/user.png" alt="logo"><br><img src="/posts/20597/user2.png" alt="logo"></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS: 匿名用户可以下载私服npm包，只有dev组内的帐户才能publish包到hosted私服</span><br></pre></td></tr></table></figure><h1 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h1><h3 id="1-配置nexus私服"><a href="#1-配置nexus私服" class="headerlink" title="1.配置nexus私服"></a>1.配置nexus私服</h3><ul><li><p>查看本机私服配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config get registry</span><br></pre></td></tr></table></figure></li><li><p>设置本机配置到group私服：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm config set registry http://$&#123;ip&#125;:8081/repository/$&#123;npm_group&#125;/</span><br><span class="line">       （写入到本机.npmrc文件）</span><br></pre></td></tr></table></figure></li><li><p>此时，项目执行npm install即从nexus上面进行下载包</p></li></ul><h3 id="2-配置publish帐户"><a href="#2-配置publish帐户" class="headerlink" title="2.配置publish帐户"></a>2.配置publish帐户</h3><p>有👇两种方式</p><ul><li><p>Authentication Using Realm and Login</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> $ npm login --registry=http://$&#123;ip&#125;:8081/repository/$&#123;npm_hosted&#125;/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Username: dev （各位根据上面创建的帐户自行替换）</span><br><span class="line">Password: $&#123;dev_pass&#125; （各位根据上面创建的密码自行替换）</span><br><span class="line">Email: (this IS public) XXX@XXX.com (各位根据上面创建的邮箱自行替换)</span><br><span class="line"></span><br><span class="line">Logged in as dev on http://$&#123;ip&#125;:8081/repository/$&#123;npm_hosted&#125;/.</span><br><span class="line">        （写入到本机.npmrc文件）</span><br></pre></td></tr></table></figure></li><li><p>Authentication Using Basic Auth</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> $ echo -n &apos;dev:$&#123;dev_pass&#125;&apos; | openssl base64  （dev帐户密码base64编码）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">本机.npmrc文件里面增加👇行</span><br><span class="line"></span><br><span class="line">email=XXX@XXX.com</span><br><span class="line">always-auth=true</span><br><span class="line">_auth=$&#123;base64编码后的值&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-推送npm包到nexus"><a href="#3-推送npm包到nexus" class="headerlink" title="3.推送npm包到nexus"></a>3.推送npm包到nexus</h3><p>有👇两种方式</p><ul><li><p>命令行 + 发布路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm publish –registry http://$&#123;ip&#125;:8081/repository/$&#123;npm_hosted&#125;</span><br></pre></td></tr></table></figure></li><li><p>package.json配置发布路径（推荐）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">项目package.json增加👇配置：</span><br><span class="line"></span><br><span class="line">&quot;publishConfig&quot; : &#123;</span><br><span class="line">  &quot;registry&quot; : &quot;http://$&#123;ip&#125;:8081/repository/$&#123;npm_hosted&#125;/&quot;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">执行👇命令即可</span><br><span class="line">$ npm publish</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考链接：&quot;&gt;&lt;a href=&quot;#参考链接：&quot; class=&quot;headerlink&quot; title=&quot;参考链接：&quot;&gt;&lt;/a&gt;参考链接：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;官方文档：&lt;a href=&quot;https://help.sonatype.com/repomanager3
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="nexus" scheme="https://0to.github.io/tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>maven Tips - force update</title>
    <link href="https://0to.github.io/posts/17688/"/>
    <id>https://0to.github.io/posts/17688/</id>
    <published>2018-05-14T08:14:11.000Z</published>
    <updated>2018-05-14T09:15:28.700Z</updated>
    
    <content type="html"><![CDATA[<h3 id="localRepository机制："><a href="#localRepository机制：" class="headerlink" title="localRepository机制："></a>localRepository机制：</h3><ul><li><a href="http://maven.apache.org/guides/introduction/introduction-to-repositories.html" target="_blank" rel="noopener">introduction-to-repositories</a><br>The local repository refers to a copy on your own installation that is a cache of the remote downloads, and also contains the temporary build artifacts that you have not yet released.</li></ul><ul><li><p>settings.xml配置：</p><pre><code>&lt;!-- localRepository    | The path to the local repository maven will use to store artifacts.    |    | Default: ${user.home}/.m2/repository--&gt;&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code></pre></li><li><p>使用场景：</p><ul><li>maven执行编译打包时先进行依赖的下载：</li><li>如果项目依赖localRepository中已经存在，那么继续进行编译打包；</li><li>如果项目依赖localRepository中不存在，那么先下载依赖到localRepository，然后进行编译打包；</li></ul></li></ul><h3 id="强制更新SNAPSHOT版本依赖："><a href="#强制更新SNAPSHOT版本依赖：" class="headerlink" title="强制更新SNAPSHOT版本依赖："></a>强制更新SNAPSHOT版本依赖：</h3><ul><li><a href="https://maven.apache.org/settings.html#Repositories" target="_blank" rel="noopener">snapshots updatePolicy</a><ul><li>updatePolicy: This element specifies how often updates should attempt to occur. Maven will compare the local POM’s timestamp (stored in a repository’s maven-metadata file) to the remote. The choices are: always, daily (default), interval:X (where X is an integer in minutes) or never.</li></ul></li><li>👇场景下需要强制更新：<ul><li>默认snapshot版本依赖localRepository更新是天级的。如果项目联调阶段一天之内多次snapshot依赖更新。</li><li>如果项目下载依赖过程中断（常见网络原因），导致localRepository中的文件状态有问题。</li></ul></li></ul><pre><code>mvn clean package -U-U,--update-snapshots                          Forces a check for missing releases and updated snapshots on remote repositories</code></pre><h3 id="强制更新RELEASE和SNAPSHOT版本依赖："><a href="#强制更新RELEASE和SNAPSHOT版本依赖：" class="headerlink" title="强制更新RELEASE和SNAPSHOT版本依赖："></a>强制更新RELEASE和SNAPSHOT版本依赖：</h3><ul><li><p>👇场景建议使用强制更新：</p><ul><li>如果项目下载依赖过程中断（常见网络原因），导致localRepository中的文件状态有问题。</li></ul></li><li><p>方法：</p><ul><li>简单粗暴型：直接清空localRepository，然后执行编译打包重新下载依赖。</li><li>推荐精细型：定向删除localRepository中 本次项目涉及依赖，然后重新下载：</li></ul></li></ul><pre><code>mvn dependency:purge-local-repository    tells Maven to clear all dependency-artifact files out of the local repository, and optionally re-resolve them.</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;localRepository机制：&quot;&gt;&lt;a href=&quot;#localRepository机制：&quot; class=&quot;headerlink&quot; title=&quot;localRepository机制：&quot;&gt;&lt;/a&gt;localRepository机制：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="maven" scheme="https://0to.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Nexus3批量导入jar包</title>
    <link href="https://0to.github.io/posts/27558/"/>
    <id>https://0to.github.io/posts/27558/</id>
    <published>2018-03-28T11:19:17.000Z</published>
    <updated>2018-05-04T07:38:27.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><ul><li><a href="https://support.sonatype.com/hc/en-us/articles/115006744008-How-can-I-programmatically-upload-an-artifact-into-Nexus-3-" target="_blank" rel="noopener">How can I programmatically upload an artifact into Nexus 3?</a></li><li><a href="https://gist.github.com/DarthHater/a4f2738e3bd40d242db22633b59dfd63" target="_blank" rel="noopener">Nexus Repository Import Script</a></li></ul><h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><p>已经搭建Nexus3.6.0，需要迁移原有 两个 nexus2上的jar包 到nexus3统一管理。</p><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><ul><li>Nexus2.x 服务器直接存储jar包</li><li>Nexus3.x 服务器存储的是二进制文件</li><li>所以不能通过 copy原Nexus2.x服务器上的 repositories目录 到nexus3.X，刷新index方式来迁移。</li></ul><h3 id="迁移导入方法："><a href="#迁移导入方法：" class="headerlink" title="迁移导入方法："></a>迁移导入方法：</h3><ol><li><p><a href="https://help.sonatype.com/display/NXRM3/Upgrading" target="_blank" rel="noopener">官方Upgrading</a><br> 具体实施可以参考上一篇blog。<br> 这种方法有两个小问题：</p><pre><code>- 需要原nexus版本为2.14.x版本- 每个nexus2导入都会在nexus3上面都会创建一个仓库，不适合有多个nexus2统一迁移到一个nexus3</code></pre></li><li><p>mvn deploy命令上传<br> 如果原nexus2待迁移的jar包并不多，可以使用这种方式。</p><pre><code>1. 只上传jar，自动生成pom.xml （独立jar，pom不需要依赖其它）mvn deploy:deploy-file -DgroupId=$groupId -DartifactId=$artifactId -Dversion=$version -Dpackaging=jar -DrepositoryId=nexus -Durl=http://$ip:8081/repository/$repository_name -Dfile=$path/XX.jar2. 上传jar 和 pom.xml (pom里面有依赖)mvn deploy:deploy-file -DgroupId=$groupId -DartifactId=$artifactId -Dversion=$version -DgeneratePom=false -Dpackaging=jar -DrepositoryId=nexus -Durl=http://$ip:8081/repository/$repository_name -DpomFile=$path/pom.xml -Dfile=$path/XX.jar</code></pre><p> 需要注意：</p><pre><code>- 命令里面-DrepositoryId=nexus对应的是本机mvn settings.xml文件配置&lt;server&gt; &lt;id&gt;- 写脚本封装上面命令实现批量迁移</code></pre></li><li><p>http协议上传<br> 直接使用http put 文件到/repository/$repo-id/$path-of-file</p><pre><code>curl -v -u admin:admin123 --upload-file pom.xml http://$ip:8081/repository/maven-releases/org/foo/1.0/foo-1.0.pom</code></pre><p> 我们需要上传的文件：jar和pom.xml</p><p> 创建 mavenimport.sh 脚本如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># Get command line params</span><br><span class="line">while getopts &quot;:r:u:p:&quot; opt; do</span><br><span class="line">    case $opt in</span><br><span class="line">        r) REPO_URL=&quot;$OPTARG&quot;</span><br><span class="line">        ;;</span><br><span class="line">        u) USERNAME=&quot;$OPTARG&quot;</span><br><span class="line">        ;;</span><br><span class="line">        p) PASSWORD=&quot;$OPTARG&quot;</span><br><span class="line">        ;;</span><br><span class="line">        esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">find . -type f -not -path &apos;*/\.*&apos; -not -path &apos;*/\^archetype\-catalog\.xml*&apos; -not -path &apos;*/\^maven\-metadata\-local*\.xml&apos; -not -path &apos;*/\^maven\-metadata\-deployment*\.xml&apos; -exec curl -u $USERNAME:$PASSWORD -X PUT -v -T &#123;&#125; $REPO_URL&#123;&#125; \;</span><br></pre></td></tr></table></figure><p> 登陆到Nexus2.x服务器执行</p><pre><code>cd $releases_dircp $path/mavenimport.sh .sh mavenimport.sh -u admin -p admin123 -r http://$ip:8081/repository/$release_repository_namecd $snapshots_dircp $path/mavenimport.sh .sh mavenimport.sh -u admin -p admin123 -r http://$ip:8081/repository/$snapshots_repository_name</code></pre><p> 需要注意：</p><pre><code>- 上面命令里面 -u admin -p admin123 请更换成nexus管理员帐户密码 （nexus默认管理员/密码 admin/admin123）- 上面命令里面 $releases_dir 是指Nexus2.x服务器上存储releases仓库路径。- 上面命令里面 $snapshots_dir 是指Nexus2.x服务器上存储snapshots仓库路径。- 如果不切换到上面目录里面，那么上传的jar包 group_id会有问题。</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考链接：&quot;&gt;&lt;a href=&quot;#参考链接：&quot; class=&quot;headerlink&quot; title=&quot;参考链接：&quot;&gt;&lt;/a&gt;参考链接：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://support.sonatype.com/hc/en-us/artic
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="nexus" scheme="https://0to.github.io/tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>svn代码库迁移到git</title>
    <link href="https://0to.github.io/posts/62558/"/>
    <id>https://0to.github.io/posts/62558/</id>
    <published>2018-03-07T02:30:04.000Z</published>
    <updated>2018-05-04T07:38:27.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><p>公司主要使用git作为代码管理仓库，现需要把部分使用svn管理的代码迁移到git。</p><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><p>需要保留所有 branches、主干、tags的历史记录。</p><h1 id="迁移方法："><a href="#迁移方法：" class="headerlink" title="迁移方法："></a>迁移方法：</h1><p>使用git官方提供的git svn命令</p><ul><li>参考链接：<a href="https://git-scm.com/docs/git-svn" target="_blank" rel="noopener">官方文档</a></li></ul><h3 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h3><ul><li>OS: macOS 10.13.3</li><li>SVN：1.9.4</li><li>GIT：2.16.2</li></ul><h1 id="迁移步骤："><a href="#迁移步骤：" class="headerlink" title="迁移步骤："></a>迁移步骤：</h1><ol><li>获取指定svn代码库涉及的开发同学名单并转换：<pre><code>svn log $SVN_URL --xml | grep author | sort -u | perl -pe &apos;s/.*&gt;(.*?)&lt;.*/$1 = /&apos; &gt; user.txt</code></pre>user.txt内容如下：<pre><code>dev1_name =dev2_name =</code></pre>因为svn只有用户名，而git需要提供用户名和邮箱，所以我们需要做下用户转换。<pre><code>修改上述命令得到的user.txt如下：dev1_name = dev1_name&lt;dev1_email&gt;dev2_name = dev2_name&lt;dev2_email&gt;</code></pre></li><li>使用git svn cloned代码库到本地：<pre><code>git svn clone $SVN_URL --no-metadata --authors-file=user.txt -s</code></pre></li><li>调整本地库目录结构：<pre><code>cd $project_dirmv .git/refs/remotes/origin/tags/$tags_name .git/refs/tags/mv .git/refs/remotes/origin/$branches_name .git/refs/heads/rm -rf .git/refs/remotes/origin</code></pre></li><li>上传本地库到remote仓库：<pre><code>git remote add origin $GIT_URLgit push origin --allgit push origin --tags</code></pre></li></ol><h3 id="PS"><a href="#PS" class="headerlink" title="PS:"></a>PS:</h3><ol><li>如果svn历史记录太多，而且并不需要很久之前的版本的话，可以选择从指定版本进行转换。<pre><code>git svn clone $SVN_URL -r $指定版本:HEAD</code></pre></li><li>较新版本的git都原生带了 git svn命令，如果你使用的git版本没有此命令，建议升级新版git或者单独安装git-svn命令。</li><li>git clone命令执行时间主要和 原SVN库大小、log多少有关。</li><li>svn迁移git后需要注意git不支持空目录，需要使用在空目录增加隐藏文件来上传，通常使用.gitkeep文件。</li><li>如果原SVN库结构不是规范的branches、tags、trunk结构<pre><code>git svn clone $SVN_URL --branches=&lt;branches_subdir&gt; --tags=&lt;tags_subdir&gt; --trunk=&lt;trunk_subdir&gt;如果没有tags的话--tags可以不写，branches同理；subdir写相对路径即可</code></pre> 上面使用的-s参数表示的是–stdlayout适合标准结构的SVN项目。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景：&quot;&gt;&lt;a href=&quot;#背景：&quot; class=&quot;headerlink&quot; title=&quot;背景：&quot;&gt;&lt;/a&gt;背景：&lt;/h1&gt;&lt;p&gt;公司主要使用git作为代码管理仓库，现需要把部分使用svn管理的代码迁移到git。&lt;/p&gt;
&lt;h3 id=&quot;需求：&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Git" scheme="https://0to.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>gitlab psql: undefined symbol: PQconnectdbParams</title>
    <link href="https://0to.github.io/posts/35560/"/>
    <id>https://0to.github.io/posts/35560/</id>
    <published>2018-01-02T06:48:04.000Z</published>
    <updated>2018-05-04T07:38:27.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司拆分子公司，需要把现有Gitlab也分离出来。</p><h4 id="搭建环境："><a href="#搭建环境：" class="headerlink" title="搭建环境："></a>搭建环境：</h4><ul><li>centos6.5</li><li>gitlab8.8.5</li></ul><h3 id="搭建方法："><a href="#搭建方法：" class="headerlink" title="搭建方法："></a>搭建方法：</h3><ul><li>Omnibus package installation</li></ul><h3 id="遇到问题："><a href="#遇到问题：" class="headerlink" title="遇到问题："></a>遇到问题：</h3><p>安装完成，执行 #gitlab-ctl reconfigure 报错如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[execute] /opt/gitlab/embedded/bin/psql: symbol lookup error: /opt/gitlab/embedded/bin/psql: undefined symbol: PQconnectdbParams</span><br><span class="line">[execute] /opt/gitlab/embedded/bin/psql: symbol lookup error: /opt/gitlab/embedded/bin/psql: undefined symbol: PQconnectdbParams</span><br><span class="line"></span><br><span class="line">================================================================================</span><br><span class="line">Error executing action `run` on resource &apos;execute[create gitlab database user]&apos;</span><br><span class="line">================================================================================</span><br><span class="line"></span><br><span class="line">Mixlib::ShellOut::ShellCommandFailed</span><br><span class="line">------------------------------------</span><br><span class="line">Expected process to exit with [0], but received &apos;127&apos;</span><br><span class="line">---- Begin output of /opt/gitlab/embedded/bin/psql --port 5432 -h /var/opt/gitlab/postgresql -d template1 -c &quot;CREATE USER gitlab&quot; ----</span><br><span class="line">STDOUT:</span><br><span class="line">STDERR: /opt/gitlab/embedded/bin/psql: symbol lookup error: /opt/gitlab/embedded/bin/psql: undefined symbol: PQconnectdbParams</span><br><span class="line">---- End output of /opt/gitlab/embedded/bin/psql --port 5432 -h /var/opt/gitlab/postgresql -d template1 -c &quot;CREATE USER gitlab&quot; ----</span><br><span class="line">Ran /opt/gitlab/embedded/bin/psql --port 5432 -h /var/opt/gitlab/postgresql -d template1 -c &quot;CREATE USER gitlab&quot; returned 127</span><br></pre></td></tr></table></figure></p><h3 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h3><p>因为我的centos服务器上面已经装了postgresql的8.4.18版本；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab0 ~]# rpm -qa|grep postgres</span><br><span class="line">postgresql-8.4.18-1.el6_4.x86_64</span><br><span class="line">postgresql-devel-8.4.18-1.el6_4.x86_64</span><br><span class="line">postgresql-libs-8.4.18-1.el6_4.x86_64</span><br></pre></td></tr></table></figure></p><p>使用/opt/gitlab/embedded/bin/psql的时候找不到对应的库(/opt/gitlab/embedded/lib/postgresql)。</p><h3 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1:"></a>解决方法1:</h3><p>卸载postgresql-8.4.18,卸载gitlab,然后重新安装gitlab。</p><p>卸载gitlab方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl stop</span><br><span class="line">sudo gitlab-ctl uninstall</span><br><span class="line">sudo gitlab-ctl cleanse</span><br><span class="line">sudo rm -rf /opt/gitlab</span><br></pre></td></tr></table></figure></p><h3 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2:"></a>解决方法2:</h3><p>增加gitlab带的psql所需lib路径到系统LD_LIBRARY_PATH<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/profile</span><br><span class="line"></span><br><span class="line">export LD_LIBRARY_PATH=/opt/gitlab/embedded/lib:/tmp/product.......</span><br><span class="line"></span><br><span class="line"># source /etc/profile</span><br><span class="line"></span><br><span class="line"># echo $LD_LIBRARY_PATH</span><br><span class="line"></span><br><span class="line">/opt/gitlab/embedded/lib:/tmp/product.......</span><br></pre></td></tr></table></figure></p><p>PS：</p><ol><li>增加/opt/gitlab/embedded/lib路径到$LD_LIBRARY_PATH最前面，因为是按顺序加载路径，所以如果加到最后面还是不能成功。</li><li>路径之间使用:分隔</li></ol><p>然后再执行#gitlab-ctl reconfigure，即可成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab Reconfigured!</span><br></pre></td></tr></table></figure></p><p>查看postgresql版本:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab0 ~]# /opt/gitlab/embedded/bin/psql --version</span><br><span class="line">psql (PostgreSQL) 9.2.16</span><br><span class="line">[root@gitlab0 ~]# psql --version</span><br><span class="line">psql (PostgreSQL) 8.4.18</span><br></pre></td></tr></table></figure></p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="http://dreamlikes.cn/archives/78" target="_blank" rel="noopener">http://dreamlikes.cn/archives/78</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;公司拆分子公司，需要把现有Gitlab也分离出来。&lt;/p&gt;
&lt;h4 id=&quot;搭建环境：&quot;&gt;&lt;a href=&quot;#搭建环境：&quot; class=&quot;h
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Gitlab" scheme="https://0to.github.io/tags/Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>使用OpenGrok查询涉及关键字代码库</title>
    <link href="https://0to.github.io/posts/61445/"/>
    <id>https://0to.github.io/posts/61445/</id>
    <published>2017-11-27T08:08:37.000Z</published>
    <updated>2018-05-04T09:48:54.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><p>dev准备更新某个基础数据库表结构，为了评估影响范围和后续通知协作，需要找出使用此表的代码库。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ol><li>查询数据库的连接IP，根据IP查询部署在上面的服务，根据服务找对应代码库。<ul><li>难点：<ul><li>并不是所有服务都会实时连接数据库，可能会漏掉；</li><li>服务器上面部署的服务太多，还需要再做过滤。</li></ul></li><li>综上，这个思路否定。</li></ul></li><li>直接通过关键字查询代码库源码来定位。<ul><li>难点：<ul><li>需要拥有大范围的代码库权限</li><li>多目录文件查询涉及关键字文件</li></ul></li><li>解决方案：<ul><li>作为公司SCM权限不是问题</li><li>使用OpenGrok来做关键字查询</li></ul></li></ul></li></ol><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ul><li>OpenGrok：<a href="http://opengrok.github.io/OpenGrok/" target="_blank" rel="noopener">官方网站</a></li></ul><h2 id="实施步骤："><a href="#实施步骤：" class="headerlink" title="实施步骤："></a>实施步骤：</h2><ol><li><p>搭建OpenGrok：</p><ul><li>安装jdk-1.8</li><li>安装tomcat-8</li><li><p>安装Exuberant Ctags <a href="http://ctags.sourceforge.net/" target="_blank" rel="noopener">下载地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ tar zxvf ctags-5.8.tar.gz</span><br><span class="line">$ cd ctags-5.8/</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure></li><li><p>安装opengrok <a href="https://github.com/OpenGrok/OpenGrok/releases" target="_blank" rel="noopener">下载地址</a>  | <a href="https://github.com/OpenGrok/OpenGrok/wiki/How-to-install-OpenGrok" target="_blank" rel="noopener">安装使用wiki</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tar zxvf opengrok-1.1-rc16.tar.gz</span><br><span class="line">$ cd opengrok-1.1-rc16/bin/</span><br><span class="line">$ OPENGROK_TOMCAT_BASE=/path/to/my/tomcat/install ./OpenGrok deploy</span><br></pre></td></tr></table></figure></li></ul></li><li><p>下载代码</p><ul><li><p>创建一个公共代码库存放目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /root/wwl/code/svn</span><br><span class="line">$ mkdir -p /root/wwl/code/git</span><br></pre></td></tr></table></figure></li><li><p>根据需要下载svn代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /root/wwl/code/svn</span><br><span class="line">$ svn checkout svn_urls</span><br></pre></td></tr></table></figure></li><li><p>根据需要下载git代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /root/wwl/code/git</span><br><span class="line">$ git clone git_urls</span><br></pre></td></tr></table></figure></li><li><p>PS:如果要想查询所有分支代码</p><ul><li>svn：直接checkout 包含branches目录url即可；</li><li>git：需要clone多次git_url到不同目录，然后cd到各自目录执行git checkout branch_name；</li><li>建议只下载master/trunk和最新dev分支即可。</li></ul></li></ul></li><li><p>加载OpenGrok索引</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./OpenGrok index &lt;absolute_path_to_your_SRC_ROOT&gt;</span><br><span class="line">例如：</span><br><span class="line">    ./OpenGrok index /root/wwl/code</span><br></pre></td></tr></table></figure><p> PS：如果代码文件很多的话，加载索引会很久。晚上执行第二天来看结果吧。</p></li><li><p>关键字查询</p><ul><li><p>web端登陆:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;HOST&gt;:&lt;PORT&gt;/source</span><br></pre></td></tr></table></figure></li><li><p>执行查询:<br><img src="/posts/61445/OpenGrok.png" alt="logo"></p></li></ul></li></ol><h1 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h1><ol><li>OpenGrok还支持文件类型查询过滤等功能，各位可以自行尝试使用；</li><li>除了数据库表查询以外，常见的还有api调用查询；</li><li>这种方案是后置的，如果能在系统设计之初和迭代过程积极维护开发文档，形成系统整体调度架构图形的话，会另我们开发更加自信；</li><li>借此机会推动开发团队规范开发文档和产出系统调度架构图形。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景：&quot;&gt;&lt;a href=&quot;#背景：&quot; class=&quot;headerlink&quot; title=&quot;背景：&quot;&gt;&lt;/a&gt;背景：&lt;/h1&gt;&lt;p&gt;dev准备更新某个基础数据库表结构，为了评估影响范围和后续通知协作，需要找出使用此表的代码库。&lt;/p&gt;
&lt;h2 id=&quot;思路：&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="OpenGrok" scheme="https://0to.github.io/tags/OpenGrok/"/>
    
  </entry>
  
  <entry>
    <title>nexus2.x迁移repository到nexus3.x</title>
    <link href="https://0to.github.io/posts/7037/"/>
    <id>https://0to.github.io/posts/7037/</id>
    <published>2017-11-21T07:58:15.000Z</published>
    <updated>2018-05-04T09:50:06.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><p>公司之前使用nexus2.13.0版本的nexus，管理毕竟混乱。现搭建nexus3.6.0版本进行规范统一管理。</p><p>上篇记录nexus3搭建配置过程，本篇记录迁移nexus2.13.0版本库到nexus3.6.0版本过程。</p><h1 id="迁移思路方法："><a href="#迁移思路方法：" class="headerlink" title="迁移思路方法："></a>迁移思路方法：</h1><h3 id="迁移范围："><a href="#迁移范围：" class="headerlink" title="迁移范围："></a>迁移范围：</h3><table><thead><tr><th>仓库</th><th style="text-align:center">类型</th><th style="text-align:right">是否迁移</th></tr></thead><tbody><tr><td>proxy</td><td style="text-align:center">代理远端仓库</td><td style="text-align:right">已经在nexus3.6.0版本配置增加，不需要迁移</td></tr><tr><td>hosted-3rd</td><td style="text-align:center">本地内部仓库-第三方</td><td style="text-align:right">之前没有使用，不需要迁移</td></tr><tr><td>hosted-Snapshots</td><td style="text-align:center">本地内部仓库-快照版本</td><td style="text-align:right">之前使用比较混乱沟通确认舍弃，不需要迁移</td></tr><tr><td>hosted-Releases</td><td style="text-align:center">本地内部仓库-稳定版本</td><td style="text-align:right">需要迁移</td></tr></tbody></table><h3 id="迁移方法："><a href="#迁移方法：" class="headerlink" title="迁移方法："></a>迁移方法：</h3><p>如果原有hosted-Releases存放的jar包不多的话，可以考虑下载所有jar到本地，然后使用命令deploy到nexus3.6.0。</p><p>现状是原有库里面的jar包很多，groupId很多而且比较不规范（目录层级很复杂）。</p><h6 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h6><p>升级方法：<a href="https://help.sonatype.com/display/NXRM3/Upgrading" target="_blank" rel="noopener">官方文档</a></p><p>根据官方升级文档说明nexus2.14.1（或者之后版本）才能直升nexus3.x。因为原有nexus版本为2.13.0，所有需要先升级到2.14.x后，再迁移到nexus3.6.0版本。</p><p>升级路径为：<br>nexus2.x – nexus2.14.x – nexus3.x</p><h1 id="迁移步骤："><a href="#迁移步骤：" class="headerlink" title="迁移步骤："></a>迁移步骤：</h1><ol><li>搭建nexus2.14.5<ul><li><a href="https://www.sonatype.com/nexus-repository-oss" target="_blank" rel="noopener">官网下载</a> All platforms - Nexus Repository Manager OSS 2.x - bundle.zip</li><li>解压缩、安装运行</li><li>ps：windows遇到的坑,需要使用管理员权限进行cmd安装<br><img src="/posts/7037/win1.png" alt="logo"><br><img src="/posts/7037/win2.png" alt="logo"><br><img src="/posts/7037/win3.png" alt="logo"></li></ul></li><li>迁移原有nexus2.13.0仓库到nexus2.14.5<ul><li>仓库存放目录：sonatype-work\nexus\storage</li><li>拷贝原nexus2.13.0的sonatype-work\nexus\storage\releases目录下的依赖文件</li><li>覆盖nexus2.14.5的releases目录文件</li><li>重启nexus2.14.5并刷新索引<br><img src="/posts/7037/win4.png" alt="logo"><br><img src="/posts/7037/win5.png" alt="logo"><br><img src="/posts/7037/win6.png" alt="logo"></li></ul></li><li>迁移nexus2.14.5仓库到nexus3.6.0<ul><li>在nexus2.14.5上面配置Upgrade Agent<br><img src="/posts/7037/win7.png" alt="logo"><br><img src="/posts/7037/win8.png" alt="logo"></li><li>在nexus3.6.0上面执行Upgrade<br><img src="/posts/7037/win10.png" alt="logo"><br><img src="/posts/7037/win11.png" alt="logo"><br><img src="/posts/7037/win12.png" alt="logo"><br><img src="/posts/7037/win13.png" alt="logo"><br><img src="/posts/7037/win14.png" alt="logo"><br><img src="/posts/7037/win15.png" alt="logo"><br><img src="/posts/7037/win16.png" alt="logo"><br><img src="/posts/7037/win17.png" alt="logo"><br><img src="/posts/7037/win18.png" alt="logo"><br><img src="/posts/7037/win19.png" alt="logo"></li></ul></li></ol><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>使用这种方法，原有的release仓库迁移成功。<br><img src="/posts/7037/win20.png" alt="logo"></p><h3 id="但是同时原有nexus的Privileges、Roles、Users也会过来，需要后续进行调整。"><a href="#但是同时原有nexus的Privileges、Roles、Users也会过来，需要后续进行调整。" class="headerlink" title="但是同时原有nexus的Privileges、Roles、Users也会过来，需要后续进行调整。"></a>但是同时原有nexus的Privileges、Roles、Users也会过来，需要后续进行调整。</h3><h2 id="当然此方法也可以用来全量升级nexus2-x到nexus3-x。"><a href="#当然此方法也可以用来全量升级nexus2-x到nexus3-x。" class="headerlink" title="当然此方法也可以用来全量升级nexus2.x到nexus3.x。"></a>当然此方法也可以用来全量升级nexus2.x到nexus3.x。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景：&quot;&gt;&lt;a href=&quot;#背景：&quot; class=&quot;headerlink&quot; title=&quot;背景：&quot;&gt;&lt;/a&gt;背景：&lt;/h1&gt;&lt;p&gt;公司之前使用nexus2.13.0版本的nexus，管理毕竟混乱。现搭建nexus3.6.0版本进行规范统一管理。&lt;/p&gt;
&lt;p&gt;上
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="nexus" scheme="https://0to.github.io/tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>Nexus3搭建配置</title>
    <link href="https://0to.github.io/posts/28954/"/>
    <id>https://0to.github.io/posts/28954/</id>
    <published>2017-11-17T06:39:35.000Z</published>
    <updated>2018-05-04T09:50:33.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><ul><li>下载地址：<a href="https://www.sonatype.com/nexus-repository-oss" target="_blank" rel="noopener">官方网站</a></li><li>软硬件需求：<a href="https://help.sonatype.com/display/NXRM3/System+Requirements" target="_blank" rel="noopener">官方文档</a></li><li>安装方法：<a href="https://help.sonatype.com/display/NXRM3/Installation" target="_blank" rel="noopener">官方文档</a></li></ul><p>PS:</p><ul><li>nexus分为nexus-repository-oss(免费版)和nexus-repository-pro(商业版)</li><li>主要使用版本：2.x和3.x</li><li>版本区别：<a href="https://help.sonatype.com/display/NXRM3/Repository+Manager+Feature+Matrix#RepositoryManagerFeatureMatrix-OBR" target="_blank" rel="noopener">官方文档</a></li></ul><h1 id="JAVA项目依赖管理方法："><a href="#JAVA项目依赖管理方法：" class="headerlink" title="JAVA项目依赖管理方法："></a>JAVA项目依赖管理方法：</h1><ol><li>所有依赖jar包都上传提交到代码库里面：<ul><li>优点：直接获取代码库代码就可以进行编译打包，不需要依赖外部网络(独立个人小项目)</li><li>缺点：<ul><li>依赖包体积很大，导致代码获取推送太耗时和占用带宽；</li><li>基础框架依赖包每个代码库都要存放一份(空间浪费)；</li><li>当前依赖包版本不明确。</li></ul></li></ul></li><li>依赖包编译过程中下载，不上传到代码库：<ul><li>优点：<ul><li>代码库干净，体积小；</li><li>项目显性配置依赖包版本和引用阶段清晰明了。</li></ul></li></ul></li></ol><h1 id="私服的优点："><a href="#私服的优点：" class="headerlink" title="私服的优点："></a>私服的优点：</h1><ol><li>统一服务器代理外部依赖（节省外网带宽）；</li><li>项目下载依赖通过内部网络的进行（更快）；</li><li>托管内部项目依赖（协作更方便）；</li><li>托管第三方依赖（例如：合作伙伴的依赖包）<br><img src="/posts/28954/nexus0.png" alt="logo"></li></ol><h1 id="搭建环境版本："><a href="#搭建环境版本：" class="headerlink" title="搭建环境版本："></a>搭建环境版本：</h1><ul><li>OS：        Windows Server 2012 R2</li><li>JDK：       1.8.0_71</li><li>nexus-repository-oss 3.6.0-02</li></ul><h1 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h1><ol><li>安装JDK</li><li>官网下载：nexus-3.6.0-02-win64.zip,解压缩</li><li><p>配置windows服务：<a href="https://help.sonatype.com/display/NXRM3/Run+as+a+Service" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$install-dir/bin/nexus.exe /install &lt;optional-service-name&gt;</span><br></pre></td></tr></table></figure></li><li><p>启动服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nexus.exe /start &lt;optional-service-name&gt;</span><br></pre></td></tr></table></figure></li><li><p>网页端登陆配置Nexus</p><ul><li>http://$ip:8081</li><li>用户名/密码：admin/admin123</li></ul></li></ol><h1 id="后台配置："><a href="#后台配置：" class="headerlink" title="后台配置："></a>后台配置：</h1><ol><li><p>data目录修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$install-dir/bin/nexus.vmoptions</span><br><span class="line"></span><br><span class="line">-Dkaraf.data=../sonatype-work/nexus3</span><br><span class="line">-Djava.io.tmpdir=../sonatype-work/nexus3/tmp</span><br><span class="line">-XX:LogFile=../sonatype-work/nexus3/log/jvm.log</span><br></pre></td></tr></table></figure></li><li><p>服务端口号修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$data-dir/etc/nexus.properties</span><br><span class="line"></span><br><span class="line"># Jetty section</span><br><span class="line">application-port=8081</span><br></pre></td></tr></table></figure></li><li><p>jvm性能调优：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$install-dir/bin/nexus.vmoptions</span><br><span class="line"></span><br><span class="line">-Xms4G</span><br><span class="line">-Xmx4G</span><br><span class="line">-XX:MaxDirectMemorySize=4014M</span><br></pre></td></tr></table></figure></li></ol><p>以上修改都需要重启服务生效。</p><h1 id="前台配置："><a href="#前台配置：" class="headerlink" title="前台配置："></a>前台配置：</h1><p>使用管理员admin账号登陆</p><h2 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h2><p><img src="/posts/28954/nexus_email.jpg" alt="logo"></p><h2 id="配置LDAP"><a href="#配置LDAP" class="headerlink" title="配置LDAP"></a>配置LDAP</h2><p><img src="/posts/28954/nexus_ldap1.png" alt="logo"><br><img src="/posts/28954/nexus_ldap2.png" alt="logo"><br><img src="/posts/28954/nexus_ldap3.png" alt="logo"></p><h2 id="配置权限"><a href="#配置权限" class="headerlink" title="配置权限"></a>配置权限</h2><p><img src="/posts/28954/nexus_role1.png" alt="logo"><br><img src="/posts/28954/nexus_role2.png" alt="logo"><br><img src="/posts/28954/nexus_role3.png" alt="logo"></p><h2 id="配置repositories"><a href="#配置repositories" class="headerlink" title="配置repositories"></a>配置repositories</h2><p>repositories分为三个种类：</p><ol><li>proxy    代理远端仓库</li><li>hosted   本地内部仓库</li><li>group    组合仓库<br><img src="/posts/28954/nexus_res.png" alt="logo"></li></ol><h1 id="Maven依赖私服配置"><a href="#Maven依赖私服配置" class="headerlink" title="Maven依赖私服配置"></a>Maven依赖私服配置</h1><p>修改~/.m2/settings.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">  &lt;servers&gt;</span><br><span class="line">    &lt;server&gt;</span><br><span class="line">      &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">      &lt;username&gt;用户名&lt;/username&gt;</span><br><span class="line">      &lt;password&gt;密码&lt;/password&gt;</span><br><span class="line">    &lt;/server&gt;</span><br><span class="line">  &lt;/servers&gt;</span><br><span class="line">  &lt;mirrors&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">    &lt;!--This sends everything else to /public --&gt;</span><br><span class="line">    &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;url&gt;http://$ip:8081/repository/maven-public/&lt;/url&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">  &lt;/mirrors&gt;</span><br><span class="line">  &lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">    &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">    &lt;!--Enable snapshots for the built in central repo to direct --&gt;</span><br><span class="line">    &lt;!--all requests to nexus via the mirror --&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">        &lt;id&gt;central&lt;/id&gt;</span><br><span class="line">        &lt;url&gt;http://central&lt;/url&gt;</span><br><span class="line">        &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</span><br><span class="line">        &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line">    &lt;pluginRepositories&gt;</span><br><span class="line">        &lt;pluginRepository&gt;</span><br><span class="line">        &lt;id&gt;central&lt;/id&gt;</span><br><span class="line">        &lt;url&gt;http://central&lt;/url&gt;</span><br><span class="line">        &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</span><br><span class="line">        &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;</span><br><span class="line">        &lt;/pluginRepository&gt;</span><br><span class="line">    &lt;/pluginRepositories&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">  &lt;/profiles&gt;</span><br><span class="line">  &lt;activeProfiles&gt;</span><br><span class="line">    &lt;!--make the profile active all the time --&gt;</span><br><span class="line">    &lt;activeProfile&gt;nexus&lt;/activeProfile&gt;</span><br><span class="line">  &lt;/activeProfiles&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure></p><h1 id="内部项目上传jar包："><a href="#内部项目上传jar包：" class="headerlink" title="内部项目上传jar包："></a>内部项目上传jar包：</h1><p>修改项目pom.xml文件增加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">      &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;Releases&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://$ip:8081/repository/maven-releases&lt;/url&gt;</span><br><span class="line">    &lt;/repository&gt;</span><br><span class="line">    &lt;snapshotRepository&gt;</span><br><span class="line">      &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;Snapshot&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://$ip:8081/repository/maven-snapshots&lt;/url&gt;</span><br><span class="line">    &lt;/snapshotRepository&gt;</span><br><span class="line">&lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure></p><p>然后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean deploy</span><br></pre></td></tr></table></figure></p><h1 id="上传第三方jar包："><a href="#上传第三方jar包：" class="headerlink" title="上传第三方jar包："></a>上传第三方jar包：</h1><p>nexus3不能使用web端来上传第三方jar包，只能使用命令行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId=$groupId -DartifactId=$artifactId -Dversion=$version -Dpackaging=jar -Dfile=$path/XX.jar -Durl=http://$ip:8081/repository/$hosted_3rd/ -DrepositoryId=nexus</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考链接：&quot;&gt;&lt;a href=&quot;#参考链接：&quot; class=&quot;headerlink&quot; title=&quot;参考链接：&quot;&gt;&lt;/a&gt;参考链接：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;下载地址：&lt;a href=&quot;https://www.sonatype.com/nexus-reposit
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="nexus" scheme="https://0to.github.io/tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>持续代码质量平台Sonar-5审计</title>
    <link href="https://0to.github.io/posts/54025/"/>
    <id>https://0to.github.io/posts/54025/</id>
    <published>2017-08-02T03:22:16.000Z</published>
    <updated>2018-05-04T09:47:48.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><pre><code>Dev已经习惯使用Sonarqube进行静态代码扫描，现准备进行阶段审计看下使用效果怎么样。</code></pre><hr><p>PS：</p><ol><li>Sonarqube根据Key来唯一标示项目。</li><li>Resolution 里面的False Positive（误报）和 Won’t fix（暂不处理）会自动继承：<ul><li>如果一个问题本次标记为False Positive 或者 Won’t fix</li><li>以后此项目进行分析时此问题自动标记。</li><li>其他项目(Key不同)还是会报此问题。<br><img src="/posts/54025/resolutions.png" alt="logo"><br><img src="/posts/54025/resolution2.png" alt="logo"></li></ul></li></ol><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>Dev正常进行开发过程的静态代码扫描，SCM对项目主干（master）代码进行轮询静态代码扫描。</p><ol><li>主干代码静态代码扫描时Project Key增加统一标志来区分Dev开发过程扫描：<ul><li>例如：修改maven pom文件 artifactId增加 master/admin/scm 后缀</li></ul></li><li>更新Dev开发过程项目标记规则到主干。</li></ol><hr><h2 id="同步不同项目标记规则："><a href="#同步不同项目标记规则：" class="headerlink" title="同步不同项目标记规则："></a>同步不同项目标记规则：</h2><ol><li>安装Issue resolver插件：<ul><li>Export and import resolved issues (false-positive and won’t fix) from SonarQube projects.</li></ul></li><li>更新dev项目标记规则到主干项目：<ul><li>web端操作方法：<br><img src="/posts/54025/biaoji1.png" alt="logo"><br><img src="/posts/54025/biaoji2.png" alt="logo"></li></ul><hr><ul><li>Api调用方法：<ul><li>查看：<a href="http://ip:9000/web_api/api/issueresolver" target="_blank" rel="noopener">http://ip:9000/web_api/api/issueresolver</a><br><img src="/posts/54025/api.png" alt="logo"></li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景：&quot;&gt;&lt;a href=&quot;#背景：&quot; class=&quot;headerlink&quot; title=&quot;背景：&quot;&gt;&lt;/a&gt;背景：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Dev已经习惯使用Sonarqube进行静态代码扫描，现准备进行阶段审计看下使用效果怎么样。
&lt;/code&gt;&lt;/pr
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Sonar" scheme="https://0to.github.io/tags/Sonar/"/>
    
  </entry>
  
  <entry>
    <title>持续代码质量平台Sonar-4Android</title>
    <link href="https://0to.github.io/posts/7875/"/>
    <id>https://0to.github.io/posts/7875/</id>
    <published>2017-07-18T10:51:03.000Z</published>
    <updated>2018-05-04T09:47:33.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><ul><li>Analyzing with SonarQube Scanner for Gradle：<a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Gradle" target="_blank" rel="noopener">官方文档</a></li><li>Gradle sonarqube插件：<a href="https://plugins.gradle.org/plugin/org.sonarqube" target="_blank" rel="noopener">官方文档</a></li><li>Sonarqube Android Lint plugin：<a href="https://github.com/ofields/sonar-android" target="_blank" rel="noopener">Github</a></li></ul><h1 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h1><ul><li>Gradle:       2.10</li><li>Sonarqube:    6.3.1</li></ul><h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">公司使用java语言开发Android项目，使用Gradle作为构建工具。</span><br><span class="line">默认的Sonarway java规则也可以进行静态代码扫描。</span><br><span class="line">希望增加业界常用的Android lint规则进行扫描，本文记录配置使用方法。</span><br></pre></td></tr></table></figure><hr><h3 id="Sonarqube-安装-Android-lint插件"><a href="#Sonarqube-安装-Android-lint插件" class="headerlink" title="Sonarqube 安装 Android lint插件"></a>Sonarqube 安装 Android lint插件</h3><p><img src="/posts/7875/Android_lint.png" alt="logo"><br>点击Quality Profiles查看Android Lint规则<br><img src="/posts/7875/lint.png" alt="logo"></p><hr><h3 id="Sonarqube-配置Android项目扫描规则"><a href="#Sonarqube-配置Android项目扫描规则" class="headerlink" title="Sonarqube 配置Android项目扫描规则"></a>Sonarqube 配置Android项目扫描规则</h3><p>我们配置一个新的Quality Profiles／java用于Android项目扫描。</p><p>新规则 包含Java Sonar way的Bugs、Vulnerabilities 和 Android Lint的Code Smells<br><img src="/posts/7875/Android.png" alt="logo"><br><img src="/posts/7875/new.png" alt="logo"><br><img src="/posts/7875/change.png" alt="logo"><br><img src="/posts/7875/next1.png" alt="logo"><br><img src="/posts/7875/next2.png" alt="logo"><br><img src="/posts/7875/code_smell.png" alt="logo"><br><img src="/posts/7875/done.png" alt="logo"></p><hr><h3 id="本地配置使用"><a href="#本地配置使用" class="headerlink" title="本地配置使用"></a>本地配置使用</h3><ul><li>配置系统gradle.properties增加下面内容 （～/.gradle/gradle.properties）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemProp.sonar.host.url=http://ip:9000</span><br><span class="line">#----- Security (when &apos;sonar.forceAuthentication&apos; is set to &apos;true&apos;)</span><br><span class="line">systemProp.sonar.login=个人token</span><br></pre></td></tr></table></figure><ul><li>修改项目build.gradle 相应位置增加下面配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &quot;org.sonarqube&quot;</span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven&#123;url &quot;https://plugins.gradle.org/m2/&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &quot;org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sonarqube &#123;</span><br><span class="line">    androidVariant &apos;fullDebug&apos;</span><br><span class="line">properties &#123;</span><br><span class="line">        property &quot;sonar.projectName&quot;, &quot;项目名称&quot;</span><br><span class="line">        property &quot;sonar.projectKey&quot;, &quot;项目Key&quot;</span><br><span class="line">        property &quot;sonar.projectDescription&quot;, &quot;项目描述&quot;</span><br><span class="line">        property &quot;sonar.projectVersion&quot;, &quot;项目版本&quot;</span><br><span class="line">        property &quot;sonar.profile&quot;, &quot;Android(上面新建的profile名称)&quot;</span><br><span class="line">        property &quot;sonar.android.lint.report&quot;, &quot;./build/outputs/lint-results-debug.xml&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>执行gradle lintDebug    生成lint-results-debug.xml</p></li><li><p>执行gradle Sonarqube    构建、分析、上传</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考链接：&quot;&gt;&lt;a href=&quot;#参考链接：&quot; class=&quot;headerlink&quot; title=&quot;参考链接：&quot;&gt;&lt;/a&gt;参考链接：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Analyzing with SonarQube Scanner for Gradle：&lt;a href=
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Sonar" scheme="https://0to.github.io/tags/Sonar/"/>
    
  </entry>
  
  <entry>
    <title>持续代码质量平台Sonar-3使用</title>
    <link href="https://0to.github.io/posts/19471/"/>
    <id>https://0to.github.io/posts/19471/</id>
    <published>2017-07-12T12:18:00.000Z</published>
    <updated>2018-05-04T07:38:27.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analyzing-Source-Code"><a href="#Analyzing-Source-Code" class="headerlink" title="Analyzing Source Code"></a>Analyzing Source Code</h2><p>参考链接：<a href="https://docs.sonarqube.org/display/SCAN/Analyzing+Source+Code" target="_blank" rel="noopener">官方文档</a></p><p>本文只涉及maven和sonar-scanner方式，其它请参考上面链接。</p><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>适合Maven项目</p><ol><li>在sonarqube平台上面个人账户生成token。</li><li><p>在本机的mvn配置settings.xml 增加下面配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;profile&gt;</span><br><span class="line">    &lt;id&gt;sonar&lt;/id&gt;</span><br><span class="line">    &lt;activation&gt;</span><br><span class="line">        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">    &lt;/activation&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;sonar.host.url&gt;http://ip:9000&lt;/sonar.host.url&gt;</span><br><span class="line">        &lt;sonar.login&gt;第一步生成的token值&lt;/sonar.login&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">&lt;/profile&gt;</span><br></pre></td></tr></table></figure></li><li><p>代码库执行打包：mvn clean install</p></li><li>代码库进行分析并上传sonarqube平台：mvn sonar:sonar</li></ol><p>PS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如果代码库pom文件配置如下</span><br><span class="line">    &lt;groupId&gt;ggg&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aaa&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;nnn&lt;/name&gt;</span><br><span class="line">那么分析上传到sonarqube平台：</span><br><span class="line">    对应的项目key为ggg:aaa</span><br><span class="line">    对应的项目名称为nnn</span><br><span class="line">    对应的版本为：1.0.0</span><br><span class="line">注意</span><br><span class="line">    不要找错项目了。</span><br><span class="line">    同一个key指向的项目永远显示的是最新的一次代码分析结果。</span><br></pre></td></tr></table></figure></p><hr><h3 id="Sonar-scanner"><a href="#Sonar-scanner" class="headerlink" title="Sonar-scanner"></a>Sonar-scanner</h3><p>适合所有项目</p><ol><li><p>下载Sonar-scanner，设置环境变量，配置&lt;install_directory&gt;/conf/sonar-scanner.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#Configure here general information about the environment, such as SonarQube DB details for example</span><br><span class="line">#No information about specific project should appear here</span><br><span class="line">#----- Default SonarQube server</span><br><span class="line">sonar.host.url=http://ip:9000</span><br><span class="line">#----- Default source code encoding</span><br><span class="line">sonar.sourceEncoding=UTF-8</span><br><span class="line">sonar.login=个人账户生成的token</span><br></pre></td></tr></table></figure></li><li><p>在项目根目录增加sonar-project.properties，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># must be unique in a given SonarQube instance</span><br><span class="line">sonar.projectKey=ggg:aaa            #对应的项目key为ggg:aaa</span><br><span class="line"># this is the name and version displayed in the SonarQube UI. Was mandatory prior to SonarQube 6.1.</span><br><span class="line">sonar.projectName=nnn               #对应的项目名称为nnn</span><br><span class="line">sonar.projectVersion=1.0.0          #对应的版本为：1.0.0</span><br><span class="line"># Path is relative to the sonar-project.properties file. Replace &quot;\&quot; by &quot;/&quot; on Windows.</span><br><span class="line"># This property is optional if sonar.modules is set.</span><br><span class="line">sonar.sources=.</span><br><span class="line">sonar.java.binaries=target/classes    #配置为项目具体的class目录，如果不配置的话只进行源代码分析</span><br><span class="line"># Encoding of the source code. Default is default system encoding</span><br><span class="line">#sonar.sourceEncoding=UTF-8</span><br></pre></td></tr></table></figure></li><li><p>执行扫描分析：<br> Build（可以不执行构建）<br> sonar-scanner</p></li></ol><hr><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>点击：<a href="http://ip:9000/web_api/" target="_blank" rel="noopener">http://ip:9000/web_api/</a> ，查看Sonarqube支持的web_api。</p><p>以Python2.7 为例简单介绍api使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line">user_info = &#123;&apos;login&apos;: &apos;username&apos;, &apos;password&apos;: &apos;pass&apos;&#125;</span><br><span class="line">api_url = &apos;http://ip:9000/api&apos;</span><br><span class="line"># 登录</span><br><span class="line">res_login = s.post(</span><br><span class="line">    &apos;%s/authentication/login&apos; % api_url, data=user_info)</span><br><span class="line"># 获取指定项目未解决Bugs详情</span><br><span class="line">res_bugs = s.get(</span><br><span class="line">    &apos;%s/issues/search&apos; % api_url, params=&#123;&apos;componentKeys&apos;: &apos;ggg:aaa&apos;, &apos;types&apos;: &apos;BUG&apos;, &apos;resolved&apos;: &apos;false&apos;, &apos;ps&apos;: 500&#125;)</span><br><span class="line"># 解析结果获取未解决bugs总数</span><br><span class="line">total_bugs = res_bugs.json()[u&apos;paging&apos;][u&apos;total&apos;]</span><br><span class="line"># 获取指定项目新增未解决Bugs详情</span><br><span class="line">res_new_bugs = s.get(</span><br><span class="line">    &apos;%s/issues/search&apos; % api_url, params=&#123;&apos;componentKeys&apos;: &apos;ggg:aaa&apos;, &apos;types&apos;: &apos;BUG&apos;, &apos;resolved&apos;: &apos;false&apos;, &apos;ps&apos;: 500, &apos;sinceLeakPeriod&apos;: &apos;true&apos;&#125;)</span><br><span class="line"># 解析结果获取新增bugs总数</span><br><span class="line">new_bugs = res_new_bugs.json()[u&apos;paging&apos;][u&apos;total&apos;]</span><br><span class="line"># 登出</span><br><span class="line">res_logout = s.post(</span><br><span class="line">    &apos;%s/authentication/logout&apos; % api_url)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Analyzing-Source-Code&quot;&gt;&lt;a href=&quot;#Analyzing-Source-Code&quot; class=&quot;headerlink&quot; title=&quot;Analyzing Source Code&quot;&gt;&lt;/a&gt;Analyzing Source Code&lt;/
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Sonar" scheme="https://0to.github.io/tags/Sonar/"/>
    
  </entry>
  
  <entry>
    <title>持续代码质量平台Sonar-2配置</title>
    <link href="https://0to.github.io/posts/32302/"/>
    <id>https://0to.github.io/posts/32302/</id>
    <published>2017-07-12T10:56:57.000Z</published>
    <updated>2018-05-04T09:47:06.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关联LDAP："><a href="#关联LDAP：" class="headerlink" title="关联LDAP："></a>关联LDAP：</h2><p>登录Sonarqube服务器，修改安装目录下的conf\sonar.properties文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># LDAP configuration</span><br><span class="line"># General Configuration</span><br><span class="line">sonar.security.realm=LDAP</span><br><span class="line">ldap.url=ldap://ip:389</span><br><span class="line">ldap.bindDn=cn=Manager,dc=xxx,dc=xxx,dc=xxx</span><br><span class="line">ldap.bindPassword=xxx</span><br><span class="line"></span><br><span class="line"># User Configuration</span><br><span class="line">ldap.user.baseDn=ou=People,dc=xxx,dc=xxx,dc=xxx</span><br><span class="line">ldap.user.request=(&amp;(objectClass=inetOrgPerson)(uid=&#123;0&#125;))</span><br><span class="line">ldap.user.realNameAttribute=cn</span><br><span class="line">ldap.user.emailAttribute=mail</span><br></pre></td></tr></table></figure></p><p>然后重启Sonarqube服务，即可使用LDAP账户进行登录。</p><hr><p>下面配置涉及下图：<br><img src="/posts/32302/sonaradmin.png" alt="logo"></p><h2 id="插件："><a href="#插件：" class="headerlink" title="插件："></a>插件：</h2><ul><li>参考链接：<a href="https://docs.sonarqube.org/display/PLUG/Plugin+Library" target="_blank" rel="noopener">官方文档</a></li><li>插件安装、更新有两种方法：<ol><li>手动下载后，上传到Sonarqube服务器安装目录下的\extensions\plugins，然后重启Sonarqube服务。</li><li>管理员账户登录Sonarqube，点击Administration - System - Update Center，进行安装or更新插件。（推荐！）</li></ol></li></ul><h2 id="配置邮件发送："><a href="#配置邮件发送：" class="headerlink" title="配置邮件发送："></a>配置邮件发送：</h2><ol><li>使用管理员账户登录Sonarqube,</li><li>点击：Administration - General Settings</li><li>找到Email配置区域，涉及以下几个SMTP配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 下面以QQ邮箱为例</span><br><span class="line">SMTP port               465</span><br><span class="line">SMTP host               smtp.exmail.qq.com</span><br><span class="line">From address            xxx@qq.com</span><br><span class="line">Email prefix            [SONARQUBE]</span><br><span class="line">Secure connection       ssl</span><br><span class="line">SMTP password           对应上面账户的密码</span><br><span class="line">SMTP username           xxx@qq.com</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="权限相关："><a href="#权限相关：" class="headerlink" title="权限相关："></a>权限相关：</h2><p>因为Sonarqube是为了发现代码问题，所以会在结果中展示源代码。为了代码安全，需要对权限进行配置。</p><h3 id="Force-user-authentication"><a href="#Force-user-authentication" class="headerlink" title="Force user authentication"></a>Force user authentication</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用管理员账户登录Sonarqube,点击Administration - General Settings - security</span><br><span class="line">    Force user authentication   ☑️              强制必须登录后才能使用</span><br><span class="line">    Default user group          sonar-users     默认新用户所在组</span><br></pre></td></tr></table></figure><h3 id="Users"><a href="#Users" class="headerlink" title="Users"></a>Users</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用管理员账户登录Sonarqube,点击Administration - Security - Users</span><br><span class="line">    此页面可以创建、修改、删除用户。</span><br><span class="line">    此页面还可以调整用户所在组信息。</span><br><span class="line">    如果是关联了LDAP，那么用户只有先使用LDAP账户登录后，才能在此查看到。</span><br></pre></td></tr></table></figure><h3 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用管理员账户登录Sonarqube,点击Administration - Security - Groups</span><br><span class="line">    此页面可以创建、删除组。</span><br><span class="line">    此页面还可以调整组用户。</span><br><span class="line">    默认存在下面2个组：</span><br><span class="line">        sonar-administrators</span><br><span class="line">        sonar-users</span><br></pre></td></tr></table></figure><h3 id="Global-Permissions"><a href="#Global-Permissions" class="headerlink" title="Global Permissions"></a>Global Permissions</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用管理员账户登录Sonarqube,点击Administration - Security - Global Permissions</span><br><span class="line">    此页面配置组用户的全局权限：</span><br><span class="line">        Administer System               系统管理员                           sonar-administrators</span><br><span class="line">        Administer Quality Profiles     可以配置Quality Profiles             sonar-administrators</span><br><span class="line">        Administer Quality Gates        可以配置Quality Gates                sonar-administrators</span><br><span class="line">        Execute Analysis                可以执行代码库分析                     sonar-users 或者 创建的组</span><br><span class="line">        Create Projects                 可以上传新代码库分析                   sonar-users 或者 创建的组</span><br></pre></td></tr></table></figure><h3 id="Permission-Templates"><a href="#Permission-Templates" class="headerlink" title="Permission Templates"></a>Permission Templates</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用管理员账户登录Sonarqube,点击Administration - Security - Permission Templates</span><br><span class="line">    此页面配置项目模版权限。</span><br><span class="line">    此页面还可以设置默认模版（新项目自动设置为默认模版权限）。</span><br><span class="line">        Browse                         查看项目状态</span><br><span class="line">        See Source Code                查看项目源代码</span><br><span class="line">        Administer Issues              对此项目的问题进行判断、评论、更改状态</span><br><span class="line">        Administer                     项目管理员</span><br><span class="line">        Execute Analysis               执行代码库分析</span><br></pre></td></tr></table></figure><h3 id="Project-PermissionsGrant"><a href="#Project-PermissionsGrant" class="headerlink" title="Project PermissionsGrant"></a>Project PermissionsGrant</h3><p>配置项目权限，有下面两种方法：</p><ol><li><p>只需要项目管理员权限即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">点击项目界面 - Administration - Permissions</span><br><span class="line">    可以增加、删除、更新组or个人对此项目权限</span><br><span class="line">    可以使用权限模版对此项目进行赋权</span><br></pre></td></tr></table></figure></li><li><p>需要系统管理员权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用管理员账户登录Sonarqube,点击Administration - Projects - Management</span><br><span class="line">    此界面展示所有项目，找到需要修改项目后。</span><br><span class="line">    点击最右边的Actions，进行权限修改or使用权限模版进行权限更新。</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="规则配置："><a href="#规则配置：" class="headerlink" title="规则配置："></a>规则配置：</h2><p>配置扫描使用的规则<br><img src="/posts/32302/sonarrules.png" alt="logo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关联LDAP：&quot;&gt;&lt;a href=&quot;#关联LDAP：&quot; class=&quot;headerlink&quot; title=&quot;关联LDAP：&quot;&gt;&lt;/a&gt;关联LDAP：&lt;/h2&gt;&lt;p&gt;登录Sonarqube服务器，修改安装目录下的conf\sonar.properties文件。&lt;br
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Sonar" scheme="https://0to.github.io/tags/Sonar/"/>
    
  </entry>
  
  <entry>
    <title>持续代码质量平台Sonar-1搭建</title>
    <link href="https://0to.github.io/posts/60810/"/>
    <id>https://0to.github.io/posts/60810/</id>
    <published>2017-06-20T08:33:00.000Z</published>
    <updated>2018-05-29T10:03:51.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><ul><li>下载地址：<a href="https://www.sonarqube.org/downloads/" target="_blank" rel="noopener">官方网站</a></li><li>软硬件需求：<a href="https://docs.sonarqube.org/display/SONAR/Requirements#Requirements-Requirements-SupportedPlatforms" target="_blank" rel="noopener">官方文档</a></li><li>安装方法：<a href="https://docs.sonarqube.org/display/SONAR/Installing+the+Server" target="_blank" rel="noopener">官方文档</a></li></ul><p>PS：</p><ul><li>Sonarqube自带了轻量级的H2数据库，测试和跑少量项目是没有问题的。基于后期的性能、运维、扩展等考虑，我们选择使用Mysql数据库。</li><li>Sonarqube自带了web server，也可以使用Tomcat来进行加载。基于以往的使用经验默认的web server足够使用，我们选择默认。</li></ul><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><ul><li>OS：      Windows Server 2012 R2</li><li>JDK:      1.8.0_71</li><li>DB:       Mysql 5.6.26</li><li>Sonar:    6.3.1</li></ul><h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><ol><li><p>安装JDK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;java -version</span><br><span class="line">java version &quot;1.8.0_71&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_71-b15)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.71-b15, mixed mode)</span><br></pre></td></tr></table></figure></li><li><p>安装Mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;mysql -V</span><br><span class="line">mysql  Ver 14.14 Distrib 5.6.26, for Win64 (x86_64)</span><br></pre></td></tr></table></figure></li><li><p>创建数据库和用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建sonar数据库</span><br><span class="line">CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line"># 创建sonar用户</span><br><span class="line">CREATE USER &apos;sonar&apos; IDENTIFIED BY &apos;passwd&apos;;</span><br><span class="line"># 赋予sonar用户对sonar数据库权限</span><br><span class="line">GRANT ALL ON sonar.* TO &apos;sonar&apos;@&apos;%&apos; IDENTIFIED BY &apos;passwd&apos;;</span><br><span class="line">GRANT ALL ON sonar.* TO &apos;sonar&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;passwd&apos;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></li><li><p>安装Sonarqube</p><ul><li>解压缩sonarqube-6.3.1.zip到D:\scm\sonarqube-6.3.1</li><li><p>修改配置D:\scm\sonarqube-6.3.1\conf\sonar.properties</p><ul><li>sonar.jdbc.username=sonar</li><li>sonar.jdbc.password=passwd</li><li>sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance</li><li>sonar.web.host=本机IP</li><li>sonar.web.context=</li><li>sonar.web.port=9000</li><li>sonar.web.http.maxThreads=500</li></ul></li><li><p>配置Sonarqube windows服务</p><ol><li>以管理员身份运行D:\scm\sonarqube-6.3.1\bin\windows-x86-64\InstallNTService.bat创建服务<br><img src="/posts/60810/Service.jpeg" alt="logo"></li><li>配置Administrator账户运行Sonarqube服务<br><img src="/posts/60810/AdminService.jpeg" alt="logo"></li><li>启动Sonarqube服务<ul><li>建议使用上面配置的windows service启动</li><li>也可以直接运行D:\scm\sonarqube-6.3.1\bin\windows-x86-64\StartSonar.bat</li></ul></li></ol></li></ul></li><li><p>网页端登陆配置Sonarqube</p><ul><li>http://搭建机器ip:9000</li><li>用户名/密码：admin</li></ul></li></ol><hr><h3 id="PS1："><a href="#PS1：" class="headerlink" title="PS1："></a>PS1：</h3><p>在安装的过程中遇到问题：</p><ul><li>运行InstallNTService.bat生成系统服务的时候没有使用管理员身份；</li><li><p>Sonarqube服务创建成功，但是启动的时候失败；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2017.06.20 14:34:50 ERROR web[][o.a.c.c.C.[.[.[/]] Exception sending context initialized event to listener instance of class org.sonar.server.platform.web.PlatformServletContextListener</span><br><span class="line">org.sonar.api.utils.MessageException: Current version is too old. Please upgrade to Long Term Support version firstly.</span><br><span class="line">2017.06.20 14:34:50 ERROR web[][o.a.c.c.StandardContext] One or more listeners failed to start. Full details will be found in the appropriate container log file</span><br><span class="line">2017.06.20 14:34:50 ERROR web[][o.a.c.c.StandardContext] Context [] startup failed due to previous errors</span><br></pre></td></tr></table></figure></li><li><p>查看发现mysql数据库sonar已经有了很多表；</p></li></ul><p>解决方法：</p><ol><li>删除sonar数据库里面的表，删除Sonarqube服务</li><li>安装上面过程：先以管理员身份运行InstallNTService.bat，然后配置Administrator账户运行Sonarqube服务</li><li>重新启动Sonarqube服务即可。</li></ol><hr><h3 id="PS2"><a href="#PS2" class="headerlink" title="PS2:"></a>PS2:</h3><p>如果Mysql数据库启用了binarylog的话，请设置为row格式。否则在启动Sonarqube的时候创建数据库表会报下面错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error updating database.  Cause: java.sql.SQLException: Cannot execute statement: impossible to write to binary log since BINLOG_FORMAT = STATEMENT and at least one table uses a storage engine limited to row-based logging. InnoDB is limited to row-logging when transaction isolation level is READ COMMITTED or READ UNCOMMITTED.</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考链接：&quot;&gt;&lt;a href=&quot;#参考链接：&quot; class=&quot;headerlink&quot; title=&quot;参考链接：&quot;&gt;&lt;/a&gt;参考链接：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;下载地址：&lt;a href=&quot;https://www.sonarqube.org/downloads/&quot; 
      
    
    </summary>
    
      <category term="SCM" scheme="https://0to.github.io/categories/SCM/"/>
    
    
      <category term="Sonar" scheme="https://0to.github.io/tags/Sonar/"/>
    
  </entry>
  
</feed>
